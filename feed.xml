<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="http://ethanguyant.com/feed.xml" rel="self" type="application/atom+xml" /><link href="http://ethanguyant.com/" rel="alternate" type="text/html" /><updated>2023-06-30T13:41:03+00:00</updated><id>http://ethanguyant.com/feed.xml</id><title type="html">Ethan Guyant’s Blog</title><subtitle>A data solution centric blog focusing on the use and application of Microsoft Power Apps, Python Programming, and Data Science.</subtitle><entry><title type="html">From Data to Insights: Maximizing Power BI’s Calculated Measures and Columns for Deeper Analysis</title><link href="http://ethanguyant.com/blog/2023-06-29-calculated-measures-columns/" rel="alternate" type="text/html" title="From Data to Insights: Maximizing Power BI’s Calculated Measures and Columns for Deeper Analysis" /><published>2023-06-29T00:00:00+00:00</published><updated>2023-06-29T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/calculated-measures-columns</id><content type="html" xml:base="http://ethanguyant.com/blog/2023-06-29-calculated-measures-columns/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the world of data analysis, the ability to derive meaningful insights from raw data is crucial. Power BI empowers you to go beyond just the basics and unlock the full potential of your data through calculated measures and columns. These game-changing features allow you to perform complex calculations and create new data points based on existing information. Enabling you to gain deeper insights and make more and better informed decisions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;calculated-measures&quot;&gt;Calculated Measures&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Creating calculated measures in Power BI is a straightforward process. With just a few simple steps, you can unleash a whole new level of analysis. For example, say you have a sales dataset and want to calculate the average unit price of products sold. This can easily be accomplished by creating a calculated measure.&lt;/p&gt;

&lt;p&gt;Start by opening Power BI Desktop and navigating to the report or dataset where you want to create the calculated measure. Right-click on the desired table, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New Measure&lt;/code&gt; and enter the required formula or expression that defines the calculation. To demonstrate the example above we will enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Average Unit Price = AVERAGE(SalesOrderDetail[UnitPrice])&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-29-calculated-measures-columns/average-unit-price.gif&quot; alt=&quot;Average Unit Price&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Power BI will instantly calculate the average unit price based on the defined formula.&lt;/p&gt;

&lt;p&gt;But wait, there is more! Calculated measure go way beyond just calculating basic aggregations.  We can step up our calculated measure game by using DAX iterator functions.  Iterator functions are DAX expressions that operate row-by-row, or in Power BI referred to as having row context. These functions typically end with an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVERAGEX&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sales&lt;/code&gt; table has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderQty&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnitPrice&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnitPriceDiscount&lt;/code&gt; columns but no column for the sales amount. We are interested in this sales amount value and how it trend over time.&lt;/p&gt;

&lt;p&gt;To analyze this we can create a new measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sales Amount&lt;/code&gt; defined by the following expression:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount = SUMX(SalesOrderDetail, SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-29-calculated-measures-columns/sales-amount.gif&quot; alt=&quot;Sales Amount&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This calculated measure allows you to gain insights into the overall sales performance and identify patterns or trends over time.&lt;/p&gt;

&lt;p&gt;For a deep dive and further exploration of iterator functions check out the following post:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Whether it’s aggregating data, calculating ratios, or applying logical functions, Power BI offers a rich set of DAX functions that have got you covered.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;calculated-columns&quot;&gt;Calculated Columns&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In addition to calculated measures Power BI also offers the ability to create calculated columns. Calculated column take your data analysis to another level by allowing you to create new data points at the individual row level. The possibilities are endless when you can combine existing columns, apply conditional logic, or generate dynamic values. Let’s consider a products dataset where you have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product Number&lt;/code&gt; which contains a two letter product type code followed by the product number. For your analysis you require an additional column containing just the product type identifier. Calculated columns are well suited to meet this need.&lt;/p&gt;

&lt;p&gt;Within Power BI Desktop right-click the table where you want to add the calculated column, select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;New Column&lt;/code&gt;, and define the formula or expression. To extract the first two characters (i.e. the product type code) we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductType = LEFT(Products[ProductNumber],2)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-29-calculated-measures-columns/product-type.gif&quot; alt=&quot;Average Unit Price&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Power BI will extract the first two characters of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product Number&lt;/code&gt; for each row, creating a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product Type&lt;/code&gt; column. This calculated column makes it easier to analyze and filter data based on the product type. Power BI’s intuitive interface and DAX language make this process seamless and approachable.&lt;/p&gt;

&lt;p&gt;For more details on calculated measures and columns check out &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt;. The post highlights the key differences between calculated measures and column and when it is best practice or beneficial to use one method over the other.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;beyond-the-basics&quot;&gt;Beyond the Basics&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Why limit yourself to basic calculations? Power BI’s calculated measures and columns give you the power to dig deeper into your data. Using complex calculations you can uncover deeper patterns, trends, and correlations that were previously hidden.  For example, with our sales data we want to analyze the percentage of total sales for each product type. With Power BI, you can create a calculated measure using the formula:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Percentage Sales =
VAR Sales = SalesOrderDetail[Sales Amount]
VAR AllSales = CALCULATE(SalesOrderDetail[Sales Amount], REMOVEFILTERS(Products[Product Type]))

RETURN
DIVIDE(Sales, AllSales)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-29-calculated-measures-columns/percentage-sales.gif&quot; alt=&quot;Percentage Sales&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Uncover patterns, trends, and correlations that have not been discovered previously. Calculate year-to-date sales, compare performance against targets, or create custom hierarchies on the fly, among many many other calculations. The possibilities are endless, and the insights are invaluable.&lt;/p&gt;

&lt;h3 id=&quot;important-concepts&quot;&gt;Important Concepts&lt;/h3&gt;

&lt;p&gt;To continue to elevate your skills in developing calculated measures and columns there are a few concepts to understand. These include row context, filter context, and context transition.&lt;/p&gt;

&lt;p&gt;When Power BI evaluates DAX expressions the values the expression can access are limited by what is referred to as the evaluation context. The two fundamental types of evaluation context are row context and filter context.&lt;/p&gt;

&lt;p&gt;For further information and a deeper dive into these concepts checkout the following posts:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Filter Context: Unraveling the Impact of Filters on Calculations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-context-transition/&quot; class=&quot;post__link&quot;&gt;Power BI Context Transition: Navigating the Transition between Row and Filter Contexts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember, the flexibility of calculated measures and columns in Power BI allows you to customize and adapt your calculations to suit your specific business needs. With a few simple and well crafted formulas, you can transform your data into meaningful insights and drive data-informed decisions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;visualize-your-calculations&quot;&gt;Visualize Your Calculations&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;By incorporating calculated measures and columns into you visualizations you can communicate your data insights effectively. Drag and drop these calculations into your reports and dashboards to display dynamic results that update in real-time. Combine them with filters, slicers, and interactive features to empower users to explore the data and gain deeper insights on their own.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The power of calculated measures and columns lies in their ability to transform data into meaningful insights. They are the key to unlocking the full potential of your data in Power BI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;With the power of calculated measures and columns in Power BI, you have the tools to elevate your data analysis to new heights. Discover the full potential of your data, uncover hidden insights, and make data-driven decisions with confidence. Embrace the simplicity and versatility of calculated measures and columns in Power BI and watch your data analysis thrive. Get ready to embark on your journey to deeper insights and unlocking the true power of your data.&lt;/p&gt;

&lt;p&gt;For further insights and techniques related to Power BI, explore the following blog posts:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Filter Context: Unraveling the Impact of Filters on Calculations&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-context-transition/&quot; class=&quot;post__link&quot;&gt;Power BI Context Transition: Navigating the Transition between Row and Filter Contexts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;These posts delve deeper into the intricacies of Power BI calculations and provide additional insights to enhance your data analysis journey.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoyed what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Quick Start" /><category term="Microsoft 365" /><category term="Power BI" /><category term="Power Platform" /><category term="Power BI Fundamentals Series" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/calculated-measures-columns.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/calculated-measures-columns.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Unleashing the Power of Power Query: A Guide to Power Query in Power BI</title><link href="http://ethanguyant.com/blog/2023-06-21-powerbi-power-query/" rel="alternate" type="text/html" title="Unleashing the Power of Power Query: A Guide to Power Query in Power BI" /><published>2023-06-21T00:00:00+00:00</published><updated>2023-06-21T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/powerbi-power-query</id><content type="html" xml:base="http://ethanguyant.com/blog/2023-06-21-powerbi-power-query/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Power Query is a powerful data preparation and transformation tool within Power BI. It empowers users to connect to various data sources, shape and cleanse data, and load it into the Power BI environment for visualization and analysis.&lt;/p&gt;

&lt;p&gt;This blog post will explore what Power Query is, the ins and outs of Power Query and how to use it effectively leveraging its full potential in Power BI for data analysis.&lt;/p&gt;

&lt;h3 id=&quot;what-is-power-query&quot;&gt;What is Power Query&lt;/h3&gt;

&lt;p&gt;Power Query is a versatile data connectivity and transformation tool that enables users to extract, manipulate, and load data from a wide range of sources into Power BI. It provides an intuitive user interfaces providing a comprehensive set of data preparation functionalities. The data preparation tools help transform raw messy data into clean data suitable for analysis.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use-power-query&quot;&gt;How to use Power Query&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Lets explore how to leverage Power Query to retrieve data from data sources and perform transformations to prepare data for analysis.&lt;/p&gt;

&lt;h3 id=&quot;connecting-to-data-sources&quot;&gt;Connecting to Data Sources&lt;/h3&gt;

&lt;p&gt;We can access Power Query from Power BI Desktop. On the top ribbon click the “Get Data” button on the Home tab. Selecting the chevron will show a list of common data sources, to view all data sources select more listed on the bottom or you select the icon above “Get Data”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/get_data.gif&quot; alt=&quot;Get Data&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Choose the desired data sources from the available options. Available sources include databases, Excel files, CSV files, web pages, and cloud-based services. Provide the required credentials and connection details to establish a connection to the selected data sources.&lt;/p&gt;

&lt;h3 id=&quot;data-transformation-and-cleansing&quot;&gt;Data Transformation and Cleansing&lt;/h3&gt;

&lt;p&gt;Power Query provides a range of data transformation capabilities. Utilizing the Power Query Editor you can shape and clean data to meet your requirements. You can perform operations like filtering, sorting, removing duplicates, splitting columns, renaming columns, merging data from multiple sources and creating custom calculated columns.&lt;/p&gt;

&lt;p&gt;Filter and sorting data using a familiar interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/filter_sort.gif&quot; alt=&quot;Filter and Sorting data&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Remove, split, and rename columns within your dataset.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/remove_split_columns.gif&quot; alt=&quot;Remove and Split Columns&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ensure the correct data types of you data by setting the column data type.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/data_types.gif&quot; alt=&quot;Set Data Types&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Leverage the power of Power Query functions and formulas to optimize your data transformation process.&lt;/p&gt;

&lt;h3 id=&quot;applied-steps&quot;&gt;Applied Steps&lt;/h3&gt;

&lt;p&gt;As you build your transformation Power Query using either built-in functions or custom transformations using the Power Query Formula Language (M Language) each transformation is recorded as an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applied Step&lt;/code&gt;. Each &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applied Step&lt;/code&gt; can be viewed in the Query Settings panes.&lt;/p&gt;

&lt;p&gt;You can review and modify the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applied Steps&lt;/code&gt; to adjust the data transformation process as required. During the review of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Applied Steps&lt;/code&gt; you can further refine the data preparation process and improve query performance. Implementing query folding and other query optimization techniques can improve the efficiency of the your Power Queries.&lt;/p&gt;

&lt;h3 id=&quot;query-dependencies-and-data-merging&quot;&gt;Query Dependencies and Data Merging&lt;/h3&gt;

&lt;p&gt;Power Query enables the the development of multiple queries, each representing a specific data sources or data transformation step. You can utilize query dependencies to define relationships between queries, allowing for data merging and consolidation. Leverage merging capabilities to combine data from multiple queries based on common fields, such as performing inner joins, left joins, or appending data.&lt;/p&gt;

&lt;p&gt;Combine or merge data from multiple queries based on one or more matching column with the Merge Queries operation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/merge_queries.gif&quot; alt=&quot;Merge Queries&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Proper use of merging capabilities can optimize your data analysis process.&lt;/p&gt;

&lt;h3 id=&quot;query-parameters-dynamic-filtering-and-functions&quot;&gt;Query Parameters, Dynamic Filtering, and Functions&lt;/h3&gt;

&lt;p&gt;Power Query allows for the use of query parameters. These query parameters act as placeholder for values that can be dynamically changed. This allows for dynamic filtering options. The use of query parameters can increase the flexibility, interactivity, and reusability of queries and the resulting Power BI reports.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/parameters.gif&quot; alt=&quot;Query Parameters&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Custom functions within Power Query can be used to encapsulate complex data transformations and you can reuse them across multiple queries.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/custom_function.gif&quot; alt=&quot;Custom Functions&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;data-loading-and-refreshing&quot;&gt;Data Loading and Refreshing&lt;/h3&gt;

&lt;p&gt;After applying the required transformations, you load the data into the Power BI data model by clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Close &amp;amp; Apply&lt;/code&gt;. Power Query creates a new query or appends the transformed data to an existing query within the Power BI data model. To ensure the data stays up to date with the source systems by setting up automatic data refreshes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-06-22-powerbi-power-query/close_apply.gif&quot; alt=&quot;Close and Apply&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;advanced-power-query-features&quot;&gt;Advanced Power Query Features&lt;/h3&gt;

&lt;p&gt;There are advanced features within Power Query such as conditional transformations, grouping and aggregation, unpivoting columns, and handline advanced data types. These features and other optimization techniques can be implemented to handle complex data scenarios and improve efficiency of you data analysis.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Power Query is a powerful tool for data preparation and transformation in Power BI. Its approachable interface and expansive capabilities empower users to connect to various data sources, cleanse and shape data, and load it into the Power BI data model. By expanding your knowledge and use of Power Query advanced features you can optimize your data analysis process, streamline data preparation, and unlock the full potential of your data. Implement the strategies outlined in this guide to improve your Power BI reports and dashboards expanding your analysis to new heights of insight and effectiveness.&lt;/p&gt;

&lt;p&gt;Start you exploration of Power Query and its features to further the effectiveness of your data analysis with increased flexibility and efficiency.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Quick Start" /><category term="Microsoft 365" /><category term="Power BI" /><category term="Power Platform" /><category term="Power BI Fundamentals Series" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/powerbi-power-query.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/powerbi-power-query.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Streamline Application Lifecycle Management with Power Platform Solutions</title><link href="http://ethanguyant.com/blog/2023-05-25-application-lifecycle-management/" rel="alternate" type="text/html" title="Streamline Application Lifecycle Management with Power Platform Solutions" /><published>2023-05-25T00:00:00+00:00</published><updated>2023-05-25T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/application-lifecycle-management</id><content type="html" xml:base="http://ethanguyant.com/blog/2023-05-25-application-lifecycle-management/">&lt;p&gt;Application lifecycle management (ALM) is a critical process for any software development projects. ALM is a comprehensive process for developing, deploying, and maintaining robust scalable applications. Power Platform solutions offer a powerful toolkit that enables application development and provide essential ALM capabilities. ALM plays a vital role in maximizing the potential and ensuring the success of you Power Platform solutions.&lt;/p&gt;

&lt;p&gt;The Microsoft Power Platform is a comprehensive suite of tools that includes Power Apps, Power Automate, and Power BI. These tools empower organizations to create custom applications, automate processes, and gain insights from data. Implementing ALM practices within the Power Platform can streamline the development process and deliver high-quality applications.&lt;/p&gt;

&lt;p&gt;This blog post will explore how implementing ALM practices can enhance collaboration, improve performance, and streamline development for Power Platform solutions.&lt;/p&gt;

&lt;h2 id=&quot;why-you-need-alm&quot;&gt;Why you need ALM&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;ALM for Power Platform solutions is crucial for several reasons:&lt;/p&gt;

&lt;p&gt;Ensuring Quality, Security, and Performance: ALM practices help organizations maintain the quality, security, and performance of their applications across different environments. It ensures that applications meet the desired standards and perform optimally.&lt;/p&gt;

&lt;p&gt;Collaborating with Other App Makers: ALM enables seamless collaboration between app makers within an organization. It provides a consistent development process, allowing multiple stakeholders to work together effectively.&lt;/p&gt;

&lt;p&gt;Managing Dependencies and Compatibility: Power Platform solutions consist of various components such as tables, columns, apps, flows, and chatbots. ALM helps manage dependencies between these components and ensures compatibility across different versions and environments.&lt;/p&gt;

&lt;p&gt;Automating Deployment and Testing: ALM enables organizations to automate the deployment and testing of Power Platform applications. It simplifies the process of tracking changes, applying updates, and ensuring the reliability of applications.&lt;/p&gt;

&lt;p&gt;Monitoring and Collecting Feedback: ALM practices facilitate monitoring and troubleshooting of applications. They enable organizations to collect feedback from end-users, identify issues, and make necessary improvements.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-implement-alm&quot;&gt;How to implement ALM&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;To implement ALM for Power Platform solutions, building projects within solutions is essential. Solutions serve as containers for packaging and distributing application artifacts across environments. They encompass all the components of an application, such as tables, columns, apps, flows, and chatbots. Solutions can be exported, imported, and used to apply customizations to existing apps.&lt;/p&gt;

&lt;h3 id=&quot;collaborative-development&quot;&gt;Collaborative Development&lt;/h3&gt;

&lt;p&gt;The Power Platform’s low-code development platform provides a collaborative environment for creators, business users, and IT professionals. The platform includes features like solution management and environment provisioning which play a role in establishing ALM for your Power Platform projects. The solution explorer enables managing multiple app components, tracking changes, and merging code updates. By enabling collaborative development, the Power Platform encourages teamwork and reduces conflicts during the development lifecycle.&lt;/p&gt;

&lt;h3 id=&quot;version-control-and-change-management&quot;&gt;Version Control and Change Management&lt;/h3&gt;

&lt;p&gt;When collaborating on components of a solution source control can be used as the single source of truth for storing each component. Source control is a system that tracks the changes and version of your code and allows you to revert or merge them as required.&lt;/p&gt;

&lt;p&gt;Version control and change management are crucial elements of ALM. They ensure an organized development process and enable efficient management of code changes. The Power Platform integrates with source control tools such as GitHub or Azure DevOps, allowing developers to track changes, manage branches, and merge code updates effectively. Incorporating version control and change management practices allows you to establish a robust foundation for ALM.&lt;/p&gt;

&lt;h3 id=&quot;testing-and-quality-assurance&quot;&gt;Testing and Quality Assurance&lt;/h3&gt;

&lt;p&gt;Testing is a crucial phase in the ALM process to ensure the reliability and quality of Power Platform applications. The Power Platform provides various testing options to validate your solutions. Power Apps allows for unit testing, where developers can create and run automated tests to validate app functionality. Power Automate offers visual validation and step-by-step debugging for workflows. Power BI allows the creation of test datasets and simulation of real-world scenarios. Comprehensive testing practices identify and resolve issues early, ensuring the delivery of high-quality applications.&lt;/p&gt;

&lt;h3 id=&quot;continuous-integration-and-deployment&quot;&gt;Continuous Integration and Deployment&lt;/h3&gt;

&lt;p&gt;Integrating Power Platform solutions with tools like Azure DevOps and GitHub enables continuous integration and deployment (CI/CD) pipelines.These automation tools streamline the deployment and testing processes. For example, Azure DevOps provides automation and release management capabilities allowing you to automate the deployment of Power Apps, Power Automate flows, and Power BI reports. With CI/CD pipelines, organizations can automate the build, testing, and deployment of their solutions. This approach accelerates release time, reduces human errors, and maintains consistency across environments. CI/CD pipelines also promote Agile and DevOps methodologies, fostering a culture of continuous improvement.&lt;/p&gt;

&lt;h3 id=&quot;monitoring-and-performance-optimization&quot;&gt;Monitoring and Performance Optimization&lt;/h3&gt;

&lt;p&gt;Once your applications are deployed, monitoring and performance optimization become an essential aspect of ALM. Monitoring tools can help you identify and resolve issues with your applications and improve their quality and functionality.  Power Platform solutions provide built-in monitoring capabilities and integrate with Azure Monitor and Applications Insights. These tools offer real-time monitoring, performance analytics, and proactive alerts. Leveraging these features helps organizations identify and address issues promptly, optimize performance, and deliver a seamless end-user experience.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The Microsoft Power Platform offers a rapid low- to no-code platform for application and solution development. However, incorporating ALM practices goes beyond rapid development. By leveraging Power Apps, Power Automate, Power BI, and their integration with tools like Azure DevOps and GitHub, organizations can streamline collaborative development, version control, testing, and deployment. Implementing ALM best practices ensures the delivery of high-quality applications, efficient teamwork, and continuous improvement. Embracing ALM in Power Platform solutions empowers organizations to develop, deploy, and maintain applications with agility and confidence.&lt;/p&gt;

&lt;p&gt;Now its time to maximize the potential of you Power Platform solutions by implementing ALM practices.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Quick Start" /><category term="Microsoft 365" /><category term="Power App" /><category term="Power BI" /><category term="Power Automate" /><category term="Power Platform" /><category term="ALM" /><summary type="html">Application lifecycle management (ALM) is a critical process for any software development projects. ALM is a comprehensive process for developing, deploying, and maintaining robust scalable applications. Power Platform solutions offer a powerful toolkit that enables application development and provide essential ALM capabilities. ALM plays a vital role in maximizing the potential and ensuring the success of you Power Platform solutions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/power-platform-alm.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/power-platform-alm.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Power BI - Key Differences Between Data Connectivity Modes</title><link href="http://ethanguyant.com/blog/2023-04-23-power-bi-connectivity-modes/" rel="alternate" type="text/html" title="Power BI - Key Differences Between Data Connectivity Modes" /><published>2023-04-23T00:00:00+00:00</published><updated>2023-04-23T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/power-bi-connectivity-modes</id><content type="html" xml:base="http://ethanguyant.com/blog/2023-04-23-power-bi-connectivity-modes/">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Power BI is a data analysis and reporting tool that connects to and consumes data from a wide variety of data sources. Once connected to data sources it provides a power tool for data modeling, data visualization, and report sharing.&lt;/p&gt;

&lt;p&gt;All data analysis projects start with first understanding the business requirements and the data sources available. Once determined the focus shifts to data consumption. Or how to load the required data into the analysis solution to provide the required insights.&lt;/p&gt;

&lt;p&gt;Part of dataset planning is determining between the various data Power BI connectivity modes. The connectivity modes are methods to connect to or load data from the data sources. The connectivity mode defines how to get the data from the data sources. The selected connectivity mode impacts report performance, data freshness, and the Power BI features available.&lt;/p&gt;

&lt;p&gt;The decision is between the default &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; connectivity mode, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; connectivity mode, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; connectivity mode, or using a composite model. This decision can be simple in some projects, where one option is the only workable option due to the requirements. In other projects this decision requires an analysis of the benefits and limitations of each connectivity mode.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;So which one is the best?&lt;/strong&gt; &lt;br /&gt;
   Well…it depends.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Each connectivity type has its use cases and generally one is not better than the other but rather a trade-off decision. When determining which connectivity mode to use it is a balance between the requirements of the report and the limitations of each method.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Moving from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; represents offloading the data modeling workload to the data source and results in less data storage within Power BI.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This post will cover each connectivity mode and provides an overview of each method as well as covering their limitations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode makes an entire copy of a subset of the source data. This data is then stored in-memory and made available to Power BI. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; does not load a copy of the data into Power BI. Rather Power BI stores information about the schema or shape of the data. Power BI then queries the data source making the underlying data available to the Power BI report. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; store a connection string to the underlying analysis services and leverages Power BI as a visualization layer.&lt;/p&gt;

&lt;p&gt;As mentioned in some projects determining a connectivity mode can be straight forward. In general, when a data source is not equipped to handle a high volume of analytical queries the preferred connectivity mode is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode. When there is a need for near real-time data then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; are the only options that can meet this need.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Key differences between the connectivity modes include the supported data sources and size of the data-model&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the projects where you must analyze each connectivity mode, keep reading to get a further understanding of the benefits and limitations of each mode.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-started&quot;&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;When establishing a connection to a data source in Power BI you are presented with different connectivity options. The options available depend on the selected data source.&lt;/p&gt;

&lt;p&gt;Available data sources can viewed by selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Get data&lt;/code&gt; on the top ribbon in Power BI Desktop. Power BI presents a list of common data sources, and the complete list can be viewed by selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;More...&lt;/code&gt; on the bottom of the list.&lt;/p&gt;

&lt;p&gt;Loading or connecting to data can be a different process depending on the selected source. For example, loading a local Excel file you are presented with the following screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-23-power-bi-connectivity-modes/1_excel_file.png&quot; alt=&quot;Connect to Excel File Screen&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here you can load the data as it is within the Excel file, or Transform your data within the Power Query Editor. Both options import a copy of the data to the Power BI data model.&lt;/p&gt;

&lt;p&gt;However, if the SQL Server data source is select you will see a screen similar to that below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-23-power-bi-connectivity-modes/2_sql_db.png&quot; alt=&quot;Connect to SQL Server Screen&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here you will notice you have an option to select the connectivity mode. There are also addition options under Advanced option such as providing a SQL statement to evaluate against the data source.&lt;/p&gt;

&lt;p&gt;Lastly, below is an example of what you are presented if you select Analysis Services as a data source.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-23-power-bi-connectivity-modes/2_analysis_services.png&quot; alt=&quot;Connect to Analysis Services Screen&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Again here you will see the option to set the connectivity mode.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The available connectivity modes for a source can change depending on what other type of connectivity modes and data sources are present within the data model.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;import&quot;&gt;Import&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Import data is a common, and default, option for loading data into Power BI. When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; Power BI extracts the data from the data source and stores it in an in-memory storage engine. When possible it is generally recommended to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode takes advantage of the high-performance query engine, creates highly interactive reports offering the full range of Power BI features. The alternative connectivity modes discussed later in this post can be used if the requirements of the report cannot be met due to the limitations of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; connectivity mode.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; models store data using Power BI’s column-based storage engine. This storage method differs from row-based storage typical of relational database systems. Row-based storage commonly used by transactional systems work well when the system frequently reads and writes individual or small groups of rows.&lt;/p&gt;

&lt;p&gt;However, this type of storage does not perform well with analytical workloads generally needed for BI reporting solutions. Analytical queries and aggregations involve a few columns of the underlying data. The need to efficiently execute these type of queries led to the column-based storage engines which store data in columns instead of rows. Column-based storage is optimized to perform aggregates and filtering on columns of data without having to retrieve the entire row from the data source.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Columnar storage applies compression to the columns by eliminating the need to store the same physical values multiple times. The storage engine applies compression algorithms to columns depending on the column data type (e.g. value encoding, hash encoding, run-length encoding).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Key considerations when using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; connectivity mode include:&lt;/p&gt;

&lt;p&gt;1) Does the imported data needed to get update?&lt;/p&gt;

&lt;p&gt;2) How frequent does the data have to be updated?&lt;/p&gt;

&lt;p&gt;3) How much data is there?&lt;/p&gt;

&lt;h3 id=&quot;import-considerations&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; Considerations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Data size: when using Power BI Pro your dataset limit is 1GB of compressed data. With Premium licenses this limit increases to 10GB or larger.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Data freshness: when using Power BI Pro you are able to schedule up to 8 refreshes per day. With Premium licenses this increases to 48 or every 30 minutes.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;If the underlying data source is an on-premise source scheduled refreshes require the use of an on-premises data gateway.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Duplicate Work: when using analysis services all the data modeling may already be complete. However, when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode much of the data modeling may have to be redone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;directquery&quot;&gt;DirectQuery&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; connectivity mode provides a method to directly connect to a data source so there is no data imported or copied into the Power BI dataset. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; can address some of the limitations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode. For example for a large datasets the queries are processed on the source server rather than the local computer running Power BI Desktop. Additionally since it provides a direct connection there is less of a need for data refreshes in Power BI. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; report queries are ran when the report is opened or interacted with by the end user.&lt;/p&gt;

&lt;p&gt;Like importing data, when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; with an on-premises data source an on-premises data gateway is required. Although there is no schedule refreshes when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; the gateway is still required to push the data to the Power BI Service.&lt;/p&gt;

&lt;p&gt;While &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; can address the limitations presented by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; comes with its own set of limitations to consider. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; is a workable option when the underlying data source can support interactive query results within an acceptable time and the source system can handle the generated query load. Since with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; analytical queries are sent to the underlying data source the performance of the data source is a major consideration when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;directquery-considerations&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; Considerations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;A key limitation when considering &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; is that not all data sources available in Power BI support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;If there are changes to the data source the report must be refreshed to show the updated data.
    &lt;ul&gt;
      &lt;li&gt;Power BI reports use caches of data and due to this there is no guarantee that visuals always display the most recent data. Selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Refresh&lt;/code&gt; on the report will clear any caches and refresh all visuals on the page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br /&gt;
Below is an example of the above limitation. Here we have a Power BI table and card visual of a products table on the left and the underlying SQL database on the right. For this example we will focus on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductID&lt;/code&gt; = 680 (HL Road Frame - Black, 58) with an initial &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListPrice&lt;/code&gt; of $1,431.50.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-23-power-bi-connectivity-modes/4_data_update.gif&quot; alt=&quot;Data Source Update Limitation&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListPrice&lt;/code&gt; is updated to a value of $150,000 in the data source. However, after the update neither the table visual nor the card showing the sum of all list prices updates.&lt;/p&gt;

&lt;p&gt;There is generally no change detection or live streaming of the data when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When we set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductID&lt;/code&gt; slicer to a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;680&lt;/code&gt; however, we see the updated value. The interaction with the slicer sents a new query to the data soucre returning the updated results displayed in the filtered table.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Setting the slicer value executes a new query with the addition of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WHERE&lt;/code&gt; clause in the SQL query and the returned result is displayed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Clearing the slicer shows the initial table again, without the updated value. Refreshing the report clears all caches and runs all queries required by the visuals on the page.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;Power BI Desktop reports must be refreshed to reflect schema changes.
    &lt;ul&gt;
      &lt;li&gt;Once you publish a report to the Power BI Service selecting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Refresh&lt;/code&gt; only refreshes the visuals in the report.
        &lt;ul&gt;
          &lt;li&gt;If the underlying schema changes the Power BI  will not automatically update the available field lists.&lt;/li&gt;
          &lt;li&gt;Removing tables or columns from the underlying source can lead to potential query failures when refreshing a report.&lt;/li&gt;
          &lt;li&gt;Updating the data schema requires opening the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pbix&lt;/code&gt; file in Power BI Desktop, refresh the report, then republish the report.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br /&gt;
Below is an example the limitation noted above. Here, we have the same Power BI report on the right as the example above and the SQL database on the left. We will start by executing the query which adds a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ManagerID&lt;/code&gt; column to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; table, sets the value as a random number between 0 and 100, and then selects the top 100 products to view the update.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-23-power-bi-connectivity-modes/5_schema_update.gif&quot; alt=&quot;Data Source Schema Update Limitation&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After executing the query we can refresh the columns of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; table in SQL Server Management Studio (SSMS) to verify it was created. Howerver, in Power BI we see that the fields available to add to the table visual does not include this new column.&lt;/p&gt;

&lt;p&gt;To view schema updates in Power BI the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pbix&lt;/code&gt; file must be refreshed and the report must be republished.&lt;/p&gt;

&lt;p&gt;As noted above if columns or tables are removed from the underlying data source Power BI queries can break. To see this we first remove the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ManagerId&lt;/code&gt; column in the data source, and then refresh the report. After refreshing the report we can see there is an issue with the table visual.&lt;/p&gt;

&lt;hr /&gt;

&lt;ul&gt;
  &lt;li&gt;The limit of rows returned by a query is capped at 1 million rows.&lt;/li&gt;
  &lt;li&gt;The Power BI data model cannot be switched from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; mode.
    &lt;ul&gt;
      &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; table can be switched to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt;, however once this is done it cannot be switched back.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some Power Query (M Language) features are not supported by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;Adding unsupported features to the Power Query Editor will result in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;This step results in a query that is not supported by DirectQuery mode&lt;/code&gt; error message.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Some DAX functions are not supported by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt;.
    &lt;ul&gt;
      &lt;li&gt;If used results in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Function &amp;lt;function_name&amp;gt; is not supported by DirectQuery mode&lt;/code&gt; error message.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;The limitations in support of M/DAX features and function is because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; converts M/DAX into the data source’s native language (e.g. T-SQL). Any DAX function used must support query folding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br /&gt;
For the example report we only need the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductID&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Name&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ListPrice&lt;/code&gt; field. However, you can see in the data pane we have all the columns present in the source data. We can modify which column are available in Power BI be editing the query in the Power Query Editor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-23-power-bi-connectivity-modes/6_native_query.gif&quot; alt=&quot;Native Query&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After removing the unneeded columns we can view the native query that get executed against the underlying data source and see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SELECT&lt;/code&gt; statement includes only the required columns (i.e. column not removed by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Removed Columns&lt;/code&gt; step).&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Other implications and considerations of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; include performance and load implications on the data source, data security implications, data-model limitations, and reporting limitations.&lt;/p&gt;

&lt;h3 id=&quot;directquery-use-cases&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; Use Cases&lt;/h3&gt;

&lt;p&gt;With its given limitations &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; can still be a suitable option for the following use cases.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When report requirements include the need for near real-time data.&lt;/li&gt;
  &lt;li&gt;The report requires a large dataset, greater than what is supported by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; mode.&lt;/li&gt;
  &lt;li&gt;The underlying data source defines and applies security rules.
    &lt;ul&gt;
      &lt;li&gt;When developing a Power BI report with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; Power BI connects to the data source by using the current user’s (report developer) credentials&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; allows a report viewer’s credentials to pass through to the underlying source, which then applies security rules.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Data sovereignty restrictions are applicable (e.g. data cannot be stored in the cloud).
    &lt;ul&gt;
      &lt;li&gt;When using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; data is cached in the Power BI Service, however there is no long term cloud storage.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;live-connection&quot;&gt;Live Connection&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; is a method that lets you build a report in Power BI Desktop without having to build a dataset to under pin the report. The connectivity mode offloads as much work as possible to the underlying analysis services. When building a report in Power BI Desktop that uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; you connect to a dataset that already exists in an analysis service.&lt;/p&gt;

&lt;p&gt;Similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; is used no data is imported or copied into the Power BI dataset. Rather Power BI stores a connection string to the existing analysis services (e.g. SSAS) or published Power BI dataset and Power BI is used as a visualization layer.&lt;/p&gt;

&lt;h3 id=&quot;live-connection-considerations&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Live Connection&lt;/code&gt; Considerations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Can only be used with a limited number of data sources.
    &lt;ul&gt;
      &lt;li&gt;Existing Analysis Service data model (SQL Server Analysis Services (SSAS) or Azure Analysis Services)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;No data-model customizations are available, any changes required to the data-model need to be done at the data source.
    &lt;ul&gt;
      &lt;li&gt;Report-Level measures are the one exception to this limitation.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User identity is passed through to the data source.
    &lt;ul&gt;
      &lt;li&gt;A report is subject to row-level security and access permissions that are set on the data-model.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;composite-models&quot;&gt;Composite Models&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Power BI no longer limits you to choosing just &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; mode. With composite models the Power BI data-model can include data connections from one (or more) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; data connections.&lt;/p&gt;

&lt;p&gt;A composite model allows you to connect to different types of data sources when creating the Power BI data-model. Within a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pbix&lt;/code&gt; file you can combine data from one or more &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; sources and/or combine data form &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; sources and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; data.&lt;/p&gt;

&lt;p&gt;Each table within the composite model will list its storage mode which shows whether the table is based on a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; source. The storage mode can be viewed and modified on the properties pane of the table.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt; &lt;br /&gt;
The example below is a Power BI report with a table visual of a products table. We have added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ManagerID&lt;/code&gt; column to this table, however there is no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Managers&lt;/code&gt; table in the underlying SQL database. Rather this information is contained within a local &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product_managers&lt;/code&gt; Excel file. With a composite model we can combined these two different data sources and connectivity modes to create a single report.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-23-power-bi-connectivity-modes/7_composite_model.gif&quot; alt=&quot;Composite Model&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Initially the report storage mode is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; because to start we only have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; table &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; connection.&lt;/p&gt;

&lt;p&gt;We use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; connectivity mode to load the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;product_mangers&lt;/code&gt; data and create the relationship between the two tables.&lt;/p&gt;

&lt;p&gt;You can check the storage mode of each table in the properties pane under Advanced. We can see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesLT Product&lt;/code&gt; table has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; storage mode and that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sheet1&lt;/code&gt; has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Import&lt;/code&gt; storege  mode&lt;/p&gt;

&lt;p&gt;Once the data model is a composite model we see the report Storage Mode update to a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mixed&lt;/code&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;composite-model-considerations&quot;&gt;Composite Model Considerations&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Security Implications: A query sent to one data source could include data values that have been extracted from a different data source.
    &lt;ul&gt;
      &lt;li&gt;If the extracted data is confidential the security impacts of this should be considered.&lt;/li&gt;
      &lt;li&gt;Avoid extracting data from one data source via an encrypted connection to then include this data in a query sent to a different source via an unencrypted connection.&lt;/li&gt;
      &lt;li&gt;When a report author includes a table from one data-model in a composite model, a user viewing a report built upon the composite model could query &lt;strong&gt;any&lt;/strong&gt; table in the data-model the table was added from.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Performance Implications: Whenever &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DirectQuery&lt;/code&gt; is used the performance of the underlying system should be considered. Ensure that is has the resources required to support the query load due to users interacting with the Power BI report.
    &lt;ul&gt;
      &lt;li&gt;A visual in a composite model can sent queries to multiple data source with the results from one query being passed to another query from a different source.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Quick Start" /><category term="Microsoft 365" /><category term="Power BI" /><category term="Power Platform" /><category term="Power BI Fundamentals Series" /><summary type="html">Introduction</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/power-bi-connectivity-modes.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/power-bi-connectivity-modes.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Lets make a model-driven app</title><link href="http://ethanguyant.com/blog/2023-01-10-model-driven-app/" rel="alternate" type="text/html" title="Lets make a model-driven app" /><published>2023-01-10T00:00:00+00:00</published><updated>2023-01-10T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/model-driven-app</id><content type="html" xml:base="http://ethanguyant.com/blog/2023-01-10-model-driven-app/">&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h1 id=&quot;model-driven-apps&quot;&gt;Model-Driven Apps&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This post starts with background information on Power Apps in general, Dataverse, and Model-Driven apps. If you are looking to jump right into building a model-driven app click here &lt;a href=&quot;#build-a-model-driven-app&quot; class=&quot;post__link&quot;&gt;Build a Model-driven App&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;background-information&quot;&gt;Background Information&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Power Apps is a rapid low-code application development environment consisting of apps, services, connectors, and a data platform. It provides tools to build apps that can connect to your data stored in various data sources. The data sources can be Microsoft Dataverse (i.e. the underlying data platform) or other online and on-premises data sources including SharePoint, Excel, SQL Server, etc.&lt;/p&gt;

&lt;p&gt;Within the Power Apps development environment you build applications with visual tools and apply app logic using formulas. This approach is similar to other commonly used business tools. Meaning you can get started using skills and knowledge you already have. The Power Platform also provides the opportunity to build upon the platform with custom developed components providing a way to create enriched experiences using web development practices.&lt;/p&gt;

&lt;p&gt;The Power Apps platform provides two different types of apps that you can create. There are Canvas Apps and Model-driven Apps. Both app types are similar and built with similar components however, the major difference lie in the amount of user control and uses cases.&lt;/p&gt;

&lt;p&gt;Canvas apps provide the user with the most control when developing the app. A canvas app starts with a blank canvas and provides full control over every aspect of the app. In addition to providing full control over the app a canvas app supports a wide variety of data sources.&lt;/p&gt;

&lt;p&gt;Model-driven apps begin with the data model and are built using a data-first approach. The data-first approach requires more technical knowledge and is best suited for more complex applications. Model-driven apps are controlled by and depend on the underlying data model. The layout and functionality of the app is determined by the data rather than the user who is developing the app.&lt;/p&gt;

&lt;p&gt;The use cases of canvas apps and model-driven apps are different and each are leveraged in different situations. Canvas apps provide flexibility in the appearance and data sources and excel at creating simplified apps. Model-driven apps build a user interface on top of a data model utilized for a well defined business process.&lt;/p&gt;

&lt;p&gt;This article will focus on creating a model-driven app including the underlying data model. Check back for a follow up article on creating your first Canvas App.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;dataverse-introduction&quot;&gt;Dataverse Introduction&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Dataverse is a relational database and is the data layer of the Power Platform.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dataverse was formerly known as the Common Data Services&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Like other relational databases it contains tables or entities as the representation of real world objects. Relationships define how table rows relate to rows from other tables. What sets it apart from traditional relational databases are the business-oriented features. Some of these features include the set of standard tables and automatically adding columns to custom tables which support underlying processes. It also provides features such as creating views, forms, dashboards, charts, and business rules directly from the table configuration.&lt;/p&gt;

&lt;p&gt;The components of the Dataverse include Storage, Metadata, Compute, Security, and Lifecycle Management.&lt;/p&gt;

&lt;p&gt;The storage layer has different types of data storage available. Each type suited for different needs and types of data. These storage types include relational data, file storage, and key:value data.&lt;/p&gt;

&lt;p&gt;The metadata component stores information about the primary data in Dataverse. A simple example of metadata for a table is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Display Name&lt;/code&gt; which you can customized. After applying customizations the changes in the table definition get stored in the metadata layer. The metadata layer is then available to the various components of the Power Platform. The metadata layer consists of the schema and the data catalog.&lt;/p&gt;

&lt;p&gt;The compute layer is a set of functionalities that include Business Logic, Data Integration, and the API layer. Business rules or logic that apply across all applications for an organization get applied in a single location rather than each individual application. The single location these rules get applied is the Business Logic sub-layer. The business logic layer contains business rules, workflows, and plugins. The Data Integration layer consists of methods which bring data into the platform and integrating existing data in other data sources. The API layer provides the interface for other application to connected to Dataverse.&lt;/p&gt;

&lt;p&gt;The security layer of Dataverse can support enterprise-grade security for applications. Some features relevant to building applications include authorization, privilege, roles/groups, and auditing. Data in Dataverse is only available to authorized users with a security model based on the various components (e.g. table, columns, rows). A user’s privilege define what level of access they have or what they are able to do within the system (e.g. read, write, delete). Roles/groups are privileges that get bundled together. Authentication is the process of validating the identity of someone trying to access the system.&lt;/p&gt;

&lt;p&gt;Application lifecycle management (ALM) is the process of managing the different phases of creating and maintaining an application. Such as development, maintenance, and decommissioning. The Lifecycle Management layer helps this process through implementing different environments, diagnostics, and solutions.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When working with the Power Platform, Dataverse, and multiple times in this post already you will come across the term Data Model so it is important to define. The data model is the set of tables and table metadata (e.g. relationships between tables). In the context of model-driven apps when we refer to the data model we mean Dataverse.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;model-driven-apps-introduction&quot;&gt;Model-Driven Apps Introduction&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Model-driven apps build a user interface on top Dataverse. The foundation of the app is the underlying data model. Although a main requirement in any app development is setting up data sources, for model-driven apps it is the primary requirement. The first and essential step of model-driven app development is properly structuring the data and processes. The user interface and functionality of the app is dependent on the data model.&lt;/p&gt;

&lt;p&gt;The development approach for model-driven apps has 3 focus areas:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Data Model: determining the required data and how it relates to other data&lt;/li&gt;
  &lt;li&gt;Defining Processes: defining and enforcing consistent processes is a key aspect of a model-driven app&lt;/li&gt;
  &lt;li&gt;Composing the app: using the app designer to add and configure the pages of the application&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;components-of-model-driven-apps&quot;&gt;Components of Model-driven Apps&lt;/h3&gt;

&lt;p&gt;The components of a model-driven app get added through the app designer and build the appearance and functionality of the app. The components included in the app and their properties make up the app’s metadata.&lt;/p&gt;

&lt;p&gt;There are four main types of components in the application and each has a designer used to create and edit the component.&lt;/p&gt;

&lt;h4 id=&quot;data-components&quot;&gt;Data Components&lt;/h4&gt;

&lt;p&gt;The data components specify the data the app builds upon.&lt;/p&gt;

&lt;p&gt;The app design approach focuses on adding dashboards, forms, views, and charts to the application. The primary goal of a model-driven app is to provide a quick view of the data and support decision making.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Component&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Designer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Table&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A container of related records&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Power Apps table designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Column&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A property of a record within a table.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Power Apps table designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Relationship&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Define how data in different tables relate to one another.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Power Apps table designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Choice&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Specialized column that provides the user a set of predefined options.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Power Apps option set designer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;user-interface-components&quot;&gt;User Interface Components&lt;/h4&gt;

&lt;p&gt;The user interface (UI) components define how the user will interact with the app.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Component&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Designer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;App&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;The fundamental properties of the application which specify the components, properties, client types, and URL&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;App designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Site Map&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Determines the navigation of the app&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Site map designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Form&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A set of data-entry columns for a specified table&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Form designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;View&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Define how a list of records for a table appear in the app&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;View designer&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;app-logic&quot;&gt;App Logic&lt;/h4&gt;

&lt;p&gt;The logic defines the processes, rules, and automation of the app.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Component&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Designer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Business Process Flow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A step-by-step aid guiding user through a process&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Business process flow designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Workflow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Automated process without a user interface&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Workflow designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Actions&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A type of process invoked from a workflow&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Process designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Business Rule&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Apply rules or recommendation logic to a form&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Business Rule Designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Power Automate&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Cloud-based service to create automated workflows between apps and services&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Power Automate&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;visual-components&quot;&gt;Visual Components&lt;/h4&gt;

&lt;p&gt;The visual components visualize the app data.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Component&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Designer&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Chart&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A single graphic visualization within a view, on a form, or added to a dashboard&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Chart designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Dashboard&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A collection of one or more visualizations&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Dashboard Designer&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Embedded Power BI&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Power BI tiles and dashboards embedded in an app&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Chart designer, dashboard designer, Power BI&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;build-a-model-driven-app&quot;&gt;Build a Model-driven App&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;We will be creating an app for Dusty Bottle Brewing. Dusty Bottle Brewing is a brewery that operates multiple tap rooms and distributes products to other local businesses.&lt;/p&gt;

&lt;p&gt;The goal of the app is provide greater insight on tap room locations and partners. The app should provide details on tap room capacities, outdoor seating, food availability, pet policies, landlords, etc.&lt;/p&gt;

&lt;h3 id=&quot;setting-up-a-development-environment&quot;&gt;Setting Up a Development Environment&lt;/h3&gt;

&lt;p&gt;First we will set up an environment to develop the app within. An environment is a container to store, manage, and share apps, workflows, and data. Environments can separate apps by security requirements or audiences (e.g. dev, test, prod).&lt;/p&gt;

&lt;p&gt;Environments are created and configured on the Environments page of the &lt;a href=&quot;https://admin.powerplatform.microsoft.com/&quot; class=&quot;post__link&quot;&gt;Power Platform Admin Center&lt;/a&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin.powerplatform.microsoft.com&lt;/code&gt;). Each tenant when created has a Default environment, although it is generally recommended not to use this environment for app development that is not intended for personal use.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/1_powerplat_admin_center.png&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We will start by creating a environment for use during this post. Types of environments include Sandbox, Trial (subscription-based), Developer, and Production. Choose the environment appropriate for your needs, you can review more details &lt;a href=&quot;https://learn.microsoft.com/en-us/power-platform/admin/create-environment&quot; class=&quot;post__link&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;During creation we toggle on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Create a database for the environment&lt;/code&gt; which will set up Dataverse within the environment. On the next pane for this demo we also toggle on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Deploy sample apps and data&lt;/code&gt;. This will provide data that we can easily work with for this demo app. Then clicking &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; will provision the environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/2_create_environment.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we can navigate to &lt;a href=&quot;https://make.powerapps.com/&quot; class=&quot;post__link&quot;&gt;make.powerapps.com&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When your tenant has multiple environments it is important to note which environment you are working in. You can view the current environment on the top right of the screen. You switch between environments by clicking on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Environment&lt;/code&gt; area of the top menu. This will open the Select environment pane where you can switch between the available environments.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/3_environments.png&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once in the correct environment you could start creating apps with the options provided. However, before we do we will first look at solutions.&lt;/p&gt;

&lt;h3 id=&quot;solutions-overview&quot;&gt;Solutions Overview&lt;/h3&gt;

&lt;p&gt;A solution is a container within an environment that holds system changes and customizations (e.g. apps). You can export a solution from an environment, as a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.zip&lt;/code&gt; file and deploy it to other environments.&lt;/p&gt;

&lt;p&gt;In this demo we will first create a solution to hold the customization needed for the app we will create.&lt;/p&gt;

&lt;p&gt;When working with solutions you will also need to be familiar with publishers. All solutions require a publisher and the publisher will provide a prefix to all the customizations (e.g. a prefix to table names).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/4_create_a_solution.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that we created the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DustyBottleBrewery&lt;/code&gt; solution we can start developing our model-driven app within this solution.&lt;/p&gt;

&lt;h3 id=&quot;design-the-data-model&quot;&gt;Design the Data-model&lt;/h3&gt;

&lt;p&gt;We will start creating the data model for the app first focusing on tables, columns, rows, and relationships in Dataverse. When working with Dataverse the common terminology includes table, column, row, choice, and Yes/No. You may come across the associated legacy terms entity, field/attribute, record, option set/multi-select option set, pick list and two options.&lt;/p&gt;

&lt;p&gt;The tables that we will need for the application include Brew Pub, Landlord, Accounts, and Contact tables. Here it is important to note that when we provisioned Dataverse for an environment it comes with a set of commonly used standard tables. So before creating custom tables it is helpful to evaluate the standard tables.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Although helpful to use standard tables when possible it is important to not use a standard table for something completely different than it’s intended use&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For example, in Dataverse there already is a Contact table that includes columns such as address and phone number. We can use this standard table for the Brew Pub’s contact information.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Note: the contact table could also be used for the landlord information, but for demonstration purposes we will create a custom table&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A summary of the tables we will work with is:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;BrewPub (Custom)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Landlord (Custom)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Contact (Standard Table)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Account (Standard Table)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Street Address&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Street Address&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Built-in Columns&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Built-in Columns&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;City&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;City&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;State&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;State&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Phone Number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Phone Number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Capacity&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Pets Allowed&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Patio Seating&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Food Available&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Landlord&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Contact&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;You may have noticed that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; table contains a Landlord and Contact column. These will be created when creating the relationships between these tables and serve as the basis for the relationships we will create within the data model.&lt;/p&gt;

&lt;h4 id=&quot;creating-tables&quot;&gt;Creating Tables&lt;/h4&gt;

&lt;p&gt;You create a custom table by navigating to the environment where the app is being developed (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DustyBottleBrewery&lt;/code&gt;). Then on the Solutions page select the  solution. On the Solution Objects page you can create a new table by selecting New on the top menu and then table. For this demo we will provide the table name and leave the other options as their default values. However, there are many advanced options that you can configure if needed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app//5_create_custom_table.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After creating the table you can view the columns and see that it comes with a number of automatically created columns. These columns support underlying system processes. We will have to add some column such as Phone Number, Street Address, City, State, and all other columns listed above.&lt;/p&gt;

&lt;p&gt;You add columns by expanding Tables on the Object pane of the solution and then expanding the specific table to show its components. Then select columns to view the columns page.&lt;/p&gt;

&lt;p&gt;From the columns page there are two options, add a New column or Add existing column. We will add the columns below with the New column option.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Column Name&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Data Type&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Street Address&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Text &amp;gt; Plain text&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;City&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Text &amp;gt; Plain text&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;State&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Text &amp;gt; Plain text&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Phone Number&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Text &amp;gt; Phone number&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Capacity&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Number &amp;gt; Whole number&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Pet Allowed&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Choice &amp;gt; Yes/no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Patio Seating&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Choice &amp;gt; Yes/no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Food Available&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Choice &amp;gt; Yes/no&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/6_create_columns.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the columns to the newly created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; table repeat the process for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Landlord&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;After creating our two custom tables we must add the existing Contacts and Accounts table to our solution. We can do this by using the Add existing option in the menu. After selecting the table there are two options to be aware of. The first is include all components. The components of the table include the columns, relationships, views, etc. If this option is not selected specific components can be explicitly selected and added to the solution. The second is include table metadata. If you include all components then this option is selected and disabled. If components are added individually this option will have to be selected to include the metadata.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/7_add_existing_table.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;creating-table-relationships&quot;&gt;Creating Table Relationships&lt;/h4&gt;

&lt;p&gt;Relationships define how tables in the database relate to other tables. When working with the Power Platform there are two main relationship types to work with.&lt;/p&gt;

&lt;p&gt;A one-to-many relationship is when a row in the &lt;em&gt;Primary Table&lt;/em&gt; is associated or reference many rows in the &lt;em&gt;Related Table&lt;/em&gt;. In Power Apps there are actually three relationship types listed when creating a relationship. However, every one-to-many relationship is also a many-to-one relationship viewed from the perspective of the related table. For this type of relationship, different relationship behaviors can be defined (e.g. cascading delete). For more detail on the various behaviors and actions check out &lt;a href=&quot;https://learn.microsoft.com/en-us/power-apps/maker/data-platform/create-edit-entity-relationships&quot; class=&quot;post__link&quot;&gt;Table Relationships&lt;/a&gt; for more information. Power Apps does provide pre-defined behavior/action grouping that can be used. These include Referential Remove Link, Referential Restrict Delete, and Parental.&lt;/p&gt;

&lt;p&gt;A many-to-many relationship is when many rows in one table are associated or reference many rows in another table.&lt;/p&gt;

&lt;p&gt;Creating a one-to-many (or many-to-one) relationship can be done in two ways. The first is to create a lookup field which creates the relationship for you. The second is to manually create the relationship which creates the lookup field for you. Manually creating the relationship is the only option available for the many-to-many relationship.&lt;/p&gt;

&lt;p&gt;We will first create the one-to-many relationship between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Landlord&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; by creating  a lookup field. In this relationship a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; can have &lt;em&gt;one&lt;/em&gt; landlord and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Landlord&lt;/code&gt; can have &lt;em&gt;many&lt;/em&gt; BrewPubs. So the first question is on which table to add the lookup field.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When using a lookup field you are looking up a &lt;strong&gt;single&lt;/strong&gt; thing. You are looking up to the one side of the relationship. This means the lookup field should be created in the table on the &lt;em&gt;many&lt;/em&gt; side of the relationship.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/9_create_one_to_many.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now will will create the many-to-many relationship between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contacts&lt;/code&gt;. In this relationship a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; can have multiple contacts and a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contact&lt;/code&gt; can be associated with multiple BrewPubs. Since this relationship is many-to-many in Power Apps it does not matter which table you select to create the relationship.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/10_create_many_to_many.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-the-app-and-the-app-components&quot;&gt;Creating the App and the App Components&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now that the underlying data model is complete we can move to creating the user interface (UI). The UI resides on top of the data-model that users will interact with. Creating the app involves working with various UI components including the site map, forms, and views. In addition to the visual components we will incorporate business rules.&lt;/p&gt;

&lt;p&gt;We create the model-driven app from within the solution under New &amp;gt; App &amp;gt; Model-driven app.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/11_create_app.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;app-navigation&quot;&gt;App Navigation&lt;/h3&gt;

&lt;p&gt;With the app now created we start by building out the site map or the navigation element of the app. On the left hand menu select Navigation to view the Navigation pane. Here you will see listed a few options created automatically. The Navigation bar is where you can set the options to show Home, Recent, and Pinned which are enabled by default. You can also enable collapsible groups and enable areas, both of these options are disabled by default.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Group&lt;/code&gt; (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Area&lt;/code&gt; if enabled) are different levels of containers that hold the navigation links. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Subarea&lt;/code&gt; which are contained within a group are linked to a content type. The content types include tables, dashboards, custom pages, web resources, or a URL.&lt;/p&gt;

&lt;p&gt;We will first create an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accounts and Contacts&lt;/code&gt; group with two subareas. The subareas will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Accounts&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contacts&lt;/code&gt; linked to the associated table. Then we will repeat this process creating a second &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dusty Bottle Brewery&lt;/code&gt; group with subareas for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPubs&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Landlords.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/12_site_map.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Before getting to far building the app its important to mention the top right options in the menu bar. Mainly &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Play&lt;/code&gt; and the difference between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Publish&lt;/code&gt;. Within the app designer you can view a preview of the app’s UI, the app can also be viewed by pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Play&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Save&lt;/code&gt; saves the version of the app you are working on but does not make those changes live and viewable to users of the application. To make any changes available to users the changes must be published first.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;app-forms&quot;&gt;App Forms&lt;/h3&gt;

&lt;p&gt;After building the navigation element we will add Forms to the app. Forms display a single row of data from a table. There are various elements of the form used to view associated data and carry out tasks.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Command Bar: used to take action such as saving a record or creating a new one&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tabs: easy access to grouped information&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Columns: displays the column data for the specific record&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Lookup Fields: specialized column to lookup a single related record&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Timeline: a list of recent actions or activities associated with the record&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Subgrid: displays the many side of a relationship (e.g. all the contacts associated with the account below)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Form Selector: navigate between different forms for the specific table&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/13_form_description.png&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The form selector (#7 above) navigates to different forms. There are various types of forms that look different and offer different functionalities.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Type&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Main&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;main user interface for working with table data&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quick Create&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;abbreviated form optimized for creating new rows&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Quick View&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;read-only form contained within another form to show information about related data&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Card&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;presents data in the unified interface dashboards&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;We will modify the main form of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; table. We locate the table in the objects viewer and navigate to Forms. All forms created automatically have a Name of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Information&lt;/code&gt; so the main form can be identified by the Form type. Select the correct form to open the Form designer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/14_form_designer.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From here we can modify and add elements to the form. By default any required fields are included in the form (e.g. Name and Owner).&lt;/p&gt;

&lt;p&gt;Within the form designer the default layout is 1 column and can be modified to 2 or 3 columns in the Formatting properties of the section. We will use 2 columns. Following this we will add additional table columns to the form. All available columns can be seen by selecting the Table columns in the left hand menu and then dragged and dropped on the form.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/15_edit_form.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Additional sections can also be added from the Components menu. Sections here are containers for the displayed fields. We will add a new Contacts section to display the related contacts for the BrewPub record. Previously, we created a many-to-many relationship between the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Contact&lt;/code&gt; tables. Since for each BrewPub we need to display multiple contacts we will need to add a subgrid to this new section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/16_add_section.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following the change we Save and Publish to make the updates available. Then we can go to the Power App and add an example BrewPub and Landlord. Navigate to each in the left-hand Navigation of the app and select New.&lt;/p&gt;

&lt;p&gt;After adding the data we can view a BrewPub record and associated contacts with that BrewPub using the subgrid. Navigate to the BrewPub Form and in the Contacts section select Add Existing Contact in the subgrid. This will open a lookup record menu, and since the dataverse was loaded with sample data, a list of contacts is presented. Select appropriate records and click Add.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;To add or remove sample data view more information here &lt;a href=&quot;https://learn.microsoft.com/en-us/power-platform/admin/add-remove-sample-data&quot; class=&quot;post__link&quot;&gt;Add or remove sample data&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/17_add_contacts.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;app-views&quot;&gt;App Views&lt;/h3&gt;

&lt;p&gt;Views within a model-driven app display a list of rows that are typically the same type (e.g. Active Contacts). The view definition is primarily made up of the columns that are displayed and any sorting or filter that should be applied.&lt;/p&gt;

&lt;p&gt;There are three main types of views. Personal views are owned by an individual and only visible to them and anyone they share it with. Public views are general purpose and viewable by everyone. System views are special views used by the application (e.g. Quick Find, Lookup).&lt;/p&gt;

&lt;p&gt;You toggle between different views from within the App. The default view can also be changed from within the app. The current default view for Contacts in My Active Contacts. We will first change the view to Inactive Contacts and then set the default to Active Contacts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/18_change_views.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;business-rules&quot;&gt;Business Rules&lt;/h3&gt;

&lt;p&gt;Business rules are utilized to dynamically update the app UI. Typical use cases for business rules include displaying error messages, setting or clearing field values, setting required fields, showing or hiding fields, and enabling or disabling fields.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is important to note that business rules are table specific.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We will create a business rule for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Account&lt;/code&gt; table to set the value of a company’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Payment Terms&lt;/code&gt; based on the company’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Credit Limit&lt;/code&gt;. First we look at the details of an Account and in the Billing section we can see both of these values are blank.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/19_billing_section.png&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The business rule we will create looks at the companies credit limit and if it is greater or equal to $125,000 then the payment terms should be set to Net 60. Otherwise, the payment terms is set to Net 30.&lt;/p&gt;

&lt;p&gt;To create the new business rule we must go to view the objects in the solution. Expand the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Account&lt;/code&gt; table then Business rule, and finally New business rule. After selecting New business rule the visual designer will open in a new tab.&lt;/p&gt;

&lt;p&gt;First we need to create the condition of the business rule. We click on the condition in the designer window and enter the properties and then Apply. Following the condition we specify what should occur if the condition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; and if it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;. For this we will add two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Set a Field Value&lt;/code&gt; components.&lt;/p&gt;

&lt;p&gt;Once the business rule is complete we must Save it and then Activate the rule.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/20_create_business_rule.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After activating the business rule we can move back to the app UI to see it in action.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;model-drive-app-security&quot;&gt;Model-Drive App Security&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Before adding a user to the environment the new app resides in the user must first be a user in the Microsoft tenant. If the user does not yet exist the account must be created in the tenant before adding then to the Power Apps environment.&lt;/p&gt;

&lt;p&gt;After creating the user in the tenant we can go to the &lt;a href=&quot;https://admin.powerplatform.microsoft.com/&quot;&gt;Power Apps Admin Center&lt;/a&gt;, and select Environments. We then navigate to the environment we are working in. Users are added to an environment in the environment settings under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Users + permissions&lt;/code&gt;. You can also access this on the Environment overview screen in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Access&lt;/code&gt; section, under Users select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;See all&lt;/code&gt;. Once on the Users page select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Add user&lt;/code&gt; and then search for the user to add. After adding the user you are prompted to set an appropriate security role for the user.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/21_add_user.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In general a security role defines what actions a user is allowed to do and where they are allowed to do those actions. For example a user’s security role could specify they have read permissions on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Account&lt;/code&gt; table. The permissions provided by the security role are on a per table basis. The same role describe above could provide the user read permissions on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Account&lt;/code&gt; table and write permissions on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;In addition, to specifying the entity within the security role definition you can also specify which rows within the table the user can read or modify.  More information on the built-in security roles and configuring a custom security role can be found here: &lt;a href=&quot;https://learn.microsoft.com/en-us/power-platform/admin/database-security&quot; class=&quot;post__link&quot;&gt;Configure user security to resources in an environment&lt;/a&gt;.  When we added the new user to the environment we assigned them the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic User&lt;/code&gt; security role. Looking at the documentation, linked above, we can get more information on the type of privileges the role has.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Security Role&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Privileges&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Basic User&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Read (self), Create (self), Write (self), Delete (self)&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Can run an app within the environment and perform common tasks for the records that they own. Note that this only applies to non-custom entities.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;An important thing to notice in the description is the last note. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic User&lt;/code&gt; role’s default privileges only apply to non-custom entities. For any custom table the privileges must be explicitly assigned.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Users, by default, do not have access to Custom tables. Privileges must be explicitly granted.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When building the Data Model for the app we created the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Landlord&lt;/code&gt; custom tables. In this environment We want the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic User&lt;/code&gt; role to have access to these tables. To provide this access we must customize the role.&lt;/p&gt;

&lt;p&gt;Security roles are viewed, modified, and created by navigating to the environment settings &amp;gt; Users + permissions &amp;gt; security roles. In the list of roles we will locate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic User&lt;/code&gt; role and select the check mark next to it. Then on the top menu select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edit&lt;/code&gt; to open the security role designer.  Then on the Custom Entities tab we locate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BrewPub&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Landlord&lt;/code&gt; table and give the role basic access to these tables.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/22_configure_security_role.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Creating, configuring, and managing security roles can be very detailed and granular which highlights the importance of having clearly defined requirements related to app security.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sharing-a-model-driven-app&quot;&gt;Sharing a Model-driven App&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Sharing a model-driven app consists of three steps including setting up the security roles, sharing the app, and finally providing the app URL to the users.&lt;/p&gt;

&lt;p&gt;To share our Dusty Bottle Brewery app, we select the check mark next to the app in our solution. Then on the top menu select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Share&lt;/code&gt;. This opens a pane to share the app and consists of a couple different parts.&lt;/p&gt;

&lt;p&gt;First on the top left is the security role of the app. This specifies the security roles that can be used by the app.&lt;/p&gt;

&lt;p&gt;Second, under people we search for the users that we want to share the app with and set their security role.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2023-04-01-model-driven-app/23_share_app.gif&quot; alt=&quot;Power Platform Admin Center&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lastly, we must share the app URL with the users. The web URL is located on the app details page and provided to the users of the app. In addition, there are other ways to provide access and includes methods such as embedding an app within Microsoft Teams.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Now that the data-model and the app UI have been created, the security roles configured and assigned, and the app has been shared with the users the focus shifts to management of the app.&lt;/p&gt;

&lt;p&gt;This management is simplified through the use of solutions. Remember the solution acts as a container of all the different components which can be deployed to different environments (e.g. development to testing to production).&lt;/p&gt;

&lt;p&gt;There are many options on how the management can be carried out and involves working with unmanaged and managed solutions. The deployment of the app can be a manual process or utilize tools such as Azure DevOps pipelines to automate and incorporate source control into the deployment process.&lt;/p&gt;

&lt;p&gt;Check back for a follow up post focused specifically on the lifecycle management of apps created in Power Apps.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;This post covered the different aspects of building and deploying a Power Apps Model-driven app. We started with general background information about Power Apps. Highlighted the two types of apps that you can build in Power Apps. These app type primarily differ on the amount of user control over the app’s data sources and interface elements. Canvas apps can be used with a variety of data sources and allow full control over the app’s user interface. And Model-driven apps must be used with Dataverse and the user interface is driven by the underlying data-model.&lt;/p&gt;

&lt;p&gt;After covering the basics of Power Apps the post provided an introduction to Dataverse. Understanding of Dataverse and its components is critical for model-driven apps.&lt;/p&gt;

&lt;p&gt;Then the post provides more detailed background on Model-driven apps specifically. Covering the different components that make up the model-driven app.&lt;/p&gt;

&lt;p&gt;Finally, the post provided a step-by-step to get a model-driven app up and running. This started with the development of the data-model, the creation of the app UI, defining security roles, and sharing the app with end users.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Deep Dive" /><category term="Microsoft 365" /><category term="Power Apps" /><category term="Power Platform" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/model-driven-app.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/model-driven-app.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">What is the Microsoft Power Platform</title><link href="http://ethanguyant.com/blog/2022-12-12-what-is-ms-power-platform/" rel="alternate" type="text/html" title="What is the Microsoft Power Platform" /><published>2022-12-12T00:00:00+00:00</published><updated>2022-12-12T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/what-is-ms-power-platform</id><content type="html" xml:base="http://ethanguyant.com/blog/2022-12-12-what-is-ms-power-platform/">&lt;h2 id=&quot;introducing-microsoft-power-platform&quot;&gt;Introducing Microsoft Power Platform&lt;/h2&gt;
&lt;p&gt;Microsoft Power Platform is a set of tools and services used to build custom applications and automate processes. It provides a low-code development platform for building applications, business intelligence tools, and process automation. The main components of the Power Platform are Power BI, Power Apps, Power Automate, and Power Virtual Agents. You can use the main components together or individually.&lt;/p&gt;

&lt;p&gt;Power BI is a business intelligence tool that allows for analyzing data and communicating insights. Power BI includes a desktop application for report development and a cloud service to host and share reports and dashboards.&lt;/p&gt;

&lt;p&gt;Power Apps is a low-code platform for custom application development. Power App’s simple and approachable interface allows business users and developers to create applications.&lt;/p&gt;

&lt;p&gt;Power Automate is a workflow automation tool that helps automate repetitive processes (e.g. data collection, and document approvals).&lt;/p&gt;

&lt;p&gt;Power Virtual Agents is a tool to develop and deploy chatbots in a low-code environment.&lt;/p&gt;

&lt;p&gt;Utilizing the components of the Power Platform allows organizations to &lt;strong&gt;Analyze&lt;/strong&gt; data and deliver insights, &lt;strong&gt;Act&lt;/strong&gt; by building low-code solutions, &lt;strong&gt;Automate&lt;/strong&gt; business processes, and &lt;strong&gt;Assist&lt;/strong&gt; with inquiries with chatbots.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-bi&quot;&gt;Power BI&lt;/h2&gt;
&lt;p&gt;Power BI is a tool for analyzing data and making informed decisions. The basic parts of Power BI include Workspaces, Datasets, Reports &amp;amp; Dashboards, and Apps.&lt;/p&gt;

&lt;p&gt;A workspace is a container to store related datasets, reports, dashboards, and dataflows. Workspaces come in two types either My workspace or workspaces. My workspace is a personal workspace. Workspaces is a container for collaborating and sharing content. All workspace members require a Power BI Pro license.&lt;/p&gt;

&lt;p&gt;Datasets are the data imported, connected to, or created within Power BI. The datasets are the data that underlie Power BI reports. When creating a  dataset you associate it with a workspace. You can include a dataset in multiple workspaces and use it in multiple reports.&lt;/p&gt;

&lt;p&gt;A report is a collection of visualizations (e.g. line chart, bar chart, KPIs, etc.). Reports can consist of multiple pages each with its own set of visualizations. A Dashboard is a collection of tiles. A tile can display a single visualization pinned from a report or an entire report page. An app in Power BI is a collection of reports, dashboards, and datasets that you package together and share.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;power-bi-desktop&quot;&gt;Power BI Desktop&lt;/h3&gt;
&lt;p&gt;Power BI Desktop is a free application that you can use to extract and transform data. The data can be from various sources and you build reports on this data. After extracting the data Power BI provides the option to transform the data. The data transformations can range from data cleaning operations to improving readability by clarifying column names and setting data types to more complex operations.&lt;/p&gt;

&lt;p&gt;There are three main pages in Power BI Desktop which you can navigate between on the left menu. The first is the Report page. This is the report canvas where you add and configure visualizations.&lt;/p&gt;

&lt;p&gt;The second is the Data page. Once you load data to the Power BI data model you can view it on this page. Also, from here you can perform additional data manipulation. This can include operations such as adding calculated columns using the Power Query Editor.&lt;/p&gt;

&lt;p&gt;The last is the Model page. On this page, you can construct and view the data model. You can also view, configure, and add any relationships between different data tables.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;power-bi-report-visuals&quot;&gt;Power BI Report Visuals&lt;/h3&gt;
&lt;p&gt;When viewing the report canvas you can add a variety of elements to your report from the Insert menu on the top ribbon. On the right-hand side of the Power BI Desktop application, there are panes for Filters, Visualizations, and Fields. You can add visuals to the report from the Visualizations pane. On the Field pane, you are able to add or change the data displayed on the visual. There are many built-in visualizations to add to Power BI reports. A few examples include bar and column charts, single and multi-row cards, KPIs, pie charts, and tables. In addition to the built-in visualizations, you can add custom visuals from the Power BI AppSource.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;publishing-power-bi-reports&quot;&gt;Publishing Power BI Reports&lt;/h3&gt;
&lt;p&gt;Once you complete a report you must publish it to share with others. You publish a report from the Power BI Desktop Home menu using the Publish option in the top ribbon. When publishing a report you must select the workspace to associate it with. Selecting any workplace other than My workspace requires a Power BI Pro license. Any reports published to My workspace are for personal content.&lt;/p&gt;

&lt;p&gt;For more details on Power BI Fundamentals check out this four-part series.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Fundamentals: Part 1 - Row Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Fundamentals: Part 2 - Iterator Functions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Fundamentals: Part 3 - Filer Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-11-08-power-bi-context-transition/&quot; class=&quot;post__link&quot;&gt;Power BI Fundamentals: Part 4 - Context Transition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-apps&quot;&gt;Power Apps&lt;/h2&gt;
&lt;p&gt;Power Apps is a rapid low-code platform for custom application development. It consists of apps, connectors, and data that are all integrated providing the tools and environment required for application development.&lt;/p&gt;

&lt;p&gt;With Power Apps, there are 3 types of apps that you can create. The first type is a Canvas app. These apps start blank and connect to various data sources. You construct the app using the low code interface. Model-driven apps are applications built on top of an existing data model. You build these apps using forms, views, and dashboards. Dataverse is the data source for model-driven apps. The last type of app is Portal. Portal creates public-facing websites. Like model-driven apps, Dataverse is the data source for Power Apps Portal.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-build-blocks-of-power-apps&quot;&gt;The Build Blocks of Power Apps&lt;/h3&gt;
&lt;p&gt;The basic building blocks of Power Apps include screens, controls, and functions. Screens are the canvas of the app’s user interface. You add different components and controls to the screens. Each app can have multiple screens. Each with its own set of controls, with each screen typically serving a different purpose.&lt;/p&gt;

&lt;p&gt;Components are reusable groupings of controls and formulas within the app. Components become helpful when creating parts of an app (e.g. navigation section) that repeat on multiple screens. Without the use of components the repeated part of the app would have to be rebuilt on each screen.&lt;/p&gt;

&lt;p&gt;Controls are the different elements that make up the app. Controls include things such as buttons, text labels and inputs, galleries, and icons. The complete list is viewable in the Power Apps Studio on the Insert tab. Each control has its own array of properties and events which are viewable after adding it to the app.&lt;/p&gt;

&lt;p&gt;The basic building blocks above develop the visual aspects of the app. However, typically there is a data aspect to the app. Power Apps connectors connect to and access data from various sources. There are standard connectors and there are premium connectors that require a Power Apps premium license.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-automate&quot;&gt;Power Automate&lt;/h2&gt;
&lt;p&gt;Power Automate is a workflow engine used to improve business processes through automation. It excels at automating repetitive manual processes which consist of predefined steps. The processes automated can range in complexity. They can be as simple as sending notifications and document approvals. Or complex multi-flow processes where certain tasks are conditionally triggered.&lt;/p&gt;

&lt;p&gt;Power Automate flows consist of the trigger, actions, and controls. The triggers available depend on the type of flow. While the actions available depend on the specific connector. Controls can create conditional evaluations and branches within the workflow.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;types-of-flows&quot;&gt;Types of Flows&lt;/h3&gt;
&lt;p&gt;In Power Automate there are three types of flows.&lt;/p&gt;

&lt;p&gt;Cloud flows are flows built that consist of a trigger and at least one other action. There are different types of cloud flows.  Automated flows get triggered when a specific action occurs. Examples of these trigger actions include a new document in a SharePoint document library or when a new Outlook email arrives. Instant flows are triggered by a user. The trigger of instant flows can be a button click, running the flow from a Power App, or on a selected SharePoint list item.&lt;/p&gt;

&lt;p&gt;Business Process flows provide a guided experience for the collection and entry of data. They augment the experience of a model-driven app.&lt;/p&gt;

&lt;p&gt;Desktop flows provide robotic process automation to Power Automate. Desktop flows allow users to record their actions while completing a process. These actions and interactions with applications are then played back and automated by the flow.&lt;/p&gt;

&lt;p&gt;For Power Automate examples please see the following related posts.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-08-19-powerautomate-inbox-cleanup/&quot; class=&quot;post__link&quot;&gt;Microsoft Power Automate: Outlook Inbox Cleanup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-07-powerautomate-dyanmic-approval-cycle/&quot; class=&quot;post__link&quot;&gt;Microsoft Power Automate: Dynamic Approval Cycle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-virtual-agents&quot;&gt;Power Virtual Agents&lt;/h2&gt;
&lt;p&gt;Power Virtual Agents is an app powered by AI and used to create chatbots. Power Virtual Agents is a tool to develop solutions for a specific topic where the bot will ask a series of questions. Using the responses to the questions the Power Virtual Agent will perform associated actions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;topics&quot;&gt;Topics&lt;/h3&gt;
&lt;p&gt;When developing a Power Virtual Agent a topic is what the person who is interacting with the bot talks to the bot about. The topic is a discrete conversation path that defines how the conversation will be processed. Each topic has phrases, keywords, or questions that act as trigger phrases. These phrases define how the bot responds and what it should do.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;entities&quot;&gt;Entities&lt;/h3&gt;
&lt;p&gt;Entities group information. Power Virtual Agents provide prebuilt entities and the ability to create custom ones. Pre-built entities represent commonly used information. With the use of these entities, the bot recognizes relevant information from user interactions. The information is then saved and used to inform later actions. Use custom entities when developing a chatbot for a specific purpose. Creating a custom entity involves teaching the chatbot language understanding model the domain-specific information.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;canvas&quot;&gt;Canvas&lt;/h3&gt;
&lt;p&gt;The canvas is where the conversation pattern gets constructed. The conversation pattern generally consists of questions, conditions, and messages. Questions can be multiple choice, text input, or an entity. The response to questions then gets stored in variables. Conditions create flow control and branches within the conversation pattern based on the responses to questions. Messages are the blocks of text displayed on the screen and viewed by the user.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;actions&quot;&gt;Actions&lt;/h3&gt;
&lt;p&gt;The Power Virtual Agents can perform actions by calling a Power Automate flow. The flows get passed the required information from Power Virtual Agent. Power Virtual agents can leverage flows that are already created in the Power Apps environment or can use a flow created within the Power Virtual Agent canvas.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;publishing&quot;&gt;Publishing&lt;/h3&gt;
&lt;p&gt;Once complete the chatbot can be published to multiple platforms or channels including websites, mobile apps, and Microsoft Teams. Following each update of the chatbot, it must be published again to update the bot on all channels.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;power-platform-related-components&quot;&gt;Power Platform Related Components&lt;/h2&gt;
&lt;p&gt;Across each of the four apps mentioned there are cross-cutting features that enable utilizing the Power Platform to its full potential. The Power Platform products use a set of three shared services or components. The core components include AI Builder, Dataverse, and Connectors. These components allow the Power Platform apps to be closely integrated.&lt;/p&gt;

&lt;p&gt;AI Builder is a solution that lets users add intelligence to created workflows and apps. These AI capabilities can predict outcomes and aid in improving business performance.&lt;/p&gt;

&lt;p&gt;Dataverse is a data storage service that allows users to securely store and manage data. A Dataverse database provides the data structure supporting interconnected apps and processes.&lt;/p&gt;

&lt;p&gt;Connectors enable users to connect apps, data, and devices. They act as an abstraction layer for APIs for other services.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Quick Start" /><category term="Microsoft 365" /><category term="Power Automate" /><category term="Power Apps" /><category term="Power Platform" /><summary type="html">Introducing Microsoft Power Platform Microsoft Power Platform is a set of tools and services used to build custom applications and automate processes. It provides a low-code development platform for building applications, business intelligence tools, and process automation. The main components of the Power Platform are Power BI, Power Apps, Power Automate, and Power Virtual Agents. You can use the main components together or individually.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/power-platform.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/power-platform.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Power BI Context Transition: Navigating the Transition between Row and Filter Contexts</title><link href="http://ethanguyant.com/blog/2022-11-08-power-bi-context-transition/" rel="alternate" type="text/html" title="Power BI Context Transition: Navigating the Transition between Row and Filter Contexts" /><published>2022-11-08T00:00:00+00:00</published><updated>2022-11-08T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/power-bi-context-transition</id><content type="html" xml:base="http://ethanguyant.com/blog/2022-11-08-power-bi-context-transition/">&lt;h2 id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#review&quot;&gt;Review&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#understanding-context-transition&quot;&gt;Understanding Context Transition&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#option-1-the-calculate-function&quot;&gt;Context Transition with CALCULATE&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#option-2-using-measures&quot;&gt;Context Transition with Measures&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#maximum-daily-sales-by-month-example&quot;&gt;Maximum Daily Sales by Month Example&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#context-transition-pit-falls&quot;&gt;Context Transition Pit Falls&lt;/a&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;
&lt;p&gt;One of the early stages of creating any Power BI report is the development of the data model. The data model will consist of data tables, relationships, and calculations. There are two types of calculations: calculated columns, and measures.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; for key differences between calculated columns and measures.&lt;/p&gt;

&lt;p&gt;One of the most powerful elements of Power BI is that all measure calculations are done in context. The evaluation context limits the values in the current scope when evaluating an expression. The filter context and/or the row context make up the evaluation context.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; explores the row context in depth. While &lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt; explores iterator functions, which are functions that create row context. And finally, &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Filter Context: Unraveling the Impact of Filters on Calculations&lt;/a&gt; explores the concept of the filter context.&lt;/p&gt;

&lt;p&gt;When evaluating expressions, the row context can be transitioned into a filter context within Power BI. This transition can help create more complex measures. Row context, filter context, and context transition can be confusing when starting with DAX so visit references and documentation often.&lt;/p&gt;

&lt;p&gt;This post is the fourth, and last, of a Power BI Fundamental series with a focus on the context transition. The example file used in this post is located here -&lt;a class=&quot;social-list__link&quot; href=&quot;https://github.com/EMGuyant/power-bi-key-fundamentals&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;understanding-context-transition&quot;&gt;Understanding Context Transition&lt;/h2&gt;
&lt;p&gt;The row context by itself does not filter data. Row context iterates through a table row-by-row. Context transition is when the row context transitions into the filter context. Context transition occurs with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function and when the expression of an iterator function is a DAX measure.&lt;/p&gt;

&lt;p&gt;The concept of context transition can be a bit abstract so it can be easiest to learn through examples. To explore we will first create a new calculated column in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products&lt;/code&gt; table. The new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductsSales&lt;/code&gt; calculates the total sales for each product and we define it as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales = SUM(SalesOrderDetail[SalesAmount])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/product-sales-no-transistion.gif&quot; alt=&quot;Total Product Sales with no Context Transition Examples&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales&lt;/code&gt; we see it repeats the same $109.85M sales value for each row. This value is the total sales amount for the entire dataset. This is not what we want &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales&lt;/code&gt; to calculate, so what happened?&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales&lt;/code&gt; calculates the total sales of the entire data rather than the &lt;em&gt;filtered&lt;/em&gt; per-product value because row context is not a filter. For example, the row context includes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductID&lt;/code&gt;  value but this identifier is not a filter on the data during evaluation. And because the row context is not a filter DAX does not distinguish between different rows (i.e products) when evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/product-sales-no-transistion-table.png&quot; alt=&quot;Product Sales no Context Transition Table&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For example, looking at the table above while evaluating the measure DAX does not distinguish the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Adjustable Race&lt;/code&gt; row from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LL Crankarm&lt;/code&gt; row. Since all rows are viewed as the same the total sales value is repeated for each row.&lt;/p&gt;

&lt;p&gt;You may have guessed it but, the example above calculates the wrong value because it does not contain a context transition. The row context does not shift to the filter context causing the error in the calculated value. This simple example highlights why context transition is important and when it’s needed. To correct this we must force the context transition. This will convert the row values into a filter and calculate the sales for each product. There are various ways to do this, and below are two options.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;option-1-the-calculate-function&quot;&gt;Option #1: The CALCULATE() Function&lt;/h3&gt;
&lt;p&gt;We can force context transition by wrapping &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function. To demonstrate we create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_calculate&lt;/code&gt; column. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_calculate&lt;/code&gt; is defined as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_calculate = CALCULATE(SUM(SalesOrderDetail[SalesAmount]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/product-sales-calculate.gif&quot; alt=&quot;Product Sales with the CALCULATE function&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This new calculated column shows the correct sales value for each product. We view the product type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; and can see now each row in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_calculate&lt;/code&gt; column is different for each row.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/product-sales-calculate.png&quot; alt=&quot;Product Sales with theC CALCULATE function&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;option-2-using-measures&quot;&gt;Option #2: Using Measures&lt;/h3&gt;
&lt;p&gt;Within the data model, we have already created a measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt;. See &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; and &lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt; for details on this measure. We defined &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2 = SUMX(SalesOrderDetail, SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We can see by the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; uses the iterator function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX()&lt;/code&gt;.  This measure calculates the sales amount row-by-row in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table.  As mentioned before context transition occurs within iterator functions.  So rather than using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUM()&lt;/code&gt; we create another calculated column that references this measure.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_measure = SalesAmount2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/product-sales-measure.png&quot; alt=&quot;Product Sales Measure&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We add the new column to the table visual and can see that it has the same value as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_calculate&lt;/code&gt;. This shows that a measure defined with an iterator also forces context transition.&lt;/p&gt;

&lt;p&gt;An important note about this new column is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductsSales_measure&lt;/code&gt; works as expected when referencing the measure. However, it will not work if we define this column as the same expression that defines &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We can see below if we update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_measure&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX(SalesOrderDetail, SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount]))&lt;/code&gt;, the same expression used when defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt;, will result in wrong values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/product-sales-expression.gif&quot; alt=&quot;Product Sales Expression&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After updating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductSales_measure&lt;/code&gt; we can see it returns the total sales values and not the sales per product. With this updated definition DAX is no longer able to apply the context transition. We can correct this by wrapping the expression with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Applying context transition always requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/product-sales-expression_update.gif&quot; alt=&quot;Product Sales Expression Update&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using the measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; worked previously because DAX implicitly wraps a measure with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt;. This is why context transition was applied when referencing the measure directly but not when referencing the same expression that defines the measure.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;maximum-daily-sales-by-month-example&quot;&gt;Maximum Daily Sales by Month Example&lt;/h2&gt;
&lt;p&gt;A question of interest is what is the maximum daily sales amount for each month in the dataset. In other words we would like to determine for each month what day of the month had the highest sales and what was the total daily sales value. We start by creating a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales&lt;/code&gt; measure and add it to the Max Daily Sales by Month and Year table visual.&lt;/p&gt;

&lt;p&gt;We define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales&lt;/code&gt; as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales = MAXX(SalesOrderDetail, [SalesAmount2])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/max-daily-sales.gif&quot; alt=&quot;Max Daily Sales&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the measure to the table we can see the sales amount value for each month. For example, the table currently shows that the maximum daily sales for November 2016 is $21,202.79. This value may appear reasonable but when examined closely we can determine it is incorrect. Currently, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales&lt;/code&gt; is returning the maximum sale for each month and is not accounting for multiple sales within each day. We can see this by creating a new visual with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxSales&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetailID&lt;/code&gt; fields.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/max-daily-sales.png&quot; alt=&quot;Max Daily Sales and Individual Sales&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This table shows that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales&lt;/code&gt; for November 2016 is the same value as a single sale that occurred on November 17th. Yet, there are multiple sales on this day and every other day. The desired outcome is to calculate the total sales for each day and then determined the highest daily total value for each month.&lt;/p&gt;

&lt;p&gt;This error occurs because context transition is not being applied correctly. It is important to note that context transition is occurring while evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales&lt;/code&gt; because it is a measure. However, the context transition is not being applied on the correct aggregation level. The context transition is occurring on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; level, meaning for each row of this table. To correct this measure we will have to force the context transition on the correct, daily, aggregation level. We update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales&lt;/code&gt; expression using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALUES()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales_Corrected&lt;/code&gt; as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales_Corrected = MAXX(VALUES(DateTable[Date]), [SalesAmount2])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/max-daily-sales-corrected.gif&quot; alt=&quot;Max Daily Sales Corrected&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We change the table passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAXX()&lt;/code&gt; from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALUES(DateTable[Date])&lt;/code&gt;. Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALUES(DateTable[Date])&lt;/code&gt; aggregates all the dates that are the same day shifting the context transition to the correct aggregation level. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VALUES()&lt;/code&gt; function in the expression provides a unique list of dates. For each day in the unique list, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; measure gets evaluated and returns the maximum daily total value. We then add the new measure to the table visual and now it shows the correct maximum daily sales for each month.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/max-daily-sales-corrected.png&quot; alt=&quot;Max Daily Sales Table&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The above example shows context transition at two different aggregation levels. They also highlight that the context transition can be shifted to return the specific value that is required. As well as showing why it is important to take into consideration the aggregation level when developing measures like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MaxDailySales&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;context-transition-pit-falls&quot;&gt;Context Transition Pit Falls&lt;/h2&gt;

&lt;p&gt;Context transition is when row values transition into or replace the filter context. When context transition occurs it can sometimes lead to unexpected and incorrect values. An important part of context transition to understand is that it transitions the entire row into the filter. So what occurs when a row is not unique? Let’s explore this with the following example.&lt;/p&gt;

&lt;p&gt;We add a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SimplifiedSales&lt;/code&gt; table to the data model.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/simplified-sales-data.png&quot; alt=&quot;Simplified Sales Data Table&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then we add a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales&lt;/code&gt; measure. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales&lt;/code&gt; is defined as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales = SUMX(SimplifiedSales, SimplifiedSales[OrderQty] * SimplifiedSales[UnitPrice] * (1 - SimplifiedSales[UnitPriceDiscount]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/simplified-sales-summary.png&quot; alt=&quot;Simplified Sales Total Sales Summary&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viewing the two tables above, we can confirm that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales&lt;/code&gt; values are correctly aggregating the sales data. Now we add another measure to the table which references the measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales&lt;/code&gt;. Referencing this measure will force context transition due to the implicit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; added to measures. See above for details.&lt;/p&gt;

&lt;p&gt;We define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales_ConextT&lt;/code&gt; as:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales_ContextT = SUMX(SimplifiedSales, [TotalSales])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-11-10-power-bi-context-transistion/simplified-sales-context-transition.png&quot; alt=&quot;Simplified Sales Context Transition Measure&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the new column we can see that the values for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Road-350-W Yellow, 48&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Touring-3000 Blue, 44&lt;/code&gt; have not changed and are correct. However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mountain-500 Silver, 52&lt;/code&gt; did update, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales_ContextT&lt;/code&gt; column shows an incorrect value. So what happened?&lt;/p&gt;

&lt;p&gt;The issue is the context transition. Viewing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SimplifiedSales&lt;/code&gt; table we can see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mountain-500 Silver, 52&lt;/code&gt; appears twice in the table. With both records having identical values for each field. Remember, context transition utilizes the entire row. Meaning the table gets filtered on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mountain-500 Silver, 52&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;/&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$450.00&lt;/code&gt;. Because of this, the result gets summed up in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSales&lt;/code&gt; measure returning a value of $900.00. This value is then evaluated twice, once for each identical row.&lt;/p&gt;

&lt;p&gt;This behavior is not seen for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Road-350-W, 48&lt;/code&gt; records because they are unique. One row has a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnitPriceDiscount&lt;/code&gt; of  0.0% and the other has a value of 5.0%. This difference makes each row unique when context transition is applied.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When context transition occurs it is important to have some sort of unique identifier creating unique rows&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Knowing what context transition is and when it occurs is important to identifying when this issue may occur. When context transition is applied it is important to check the table and verify calculations to ensure it is applied correctly.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Deep Dive" /><category term="Microsoft 365" /><category term="Power BI" /><category term="Power Platform" /><category term="Power BI Fundamentals Series" /><summary type="html">Contents Review Understanding Context Transition Context Transition with CALCULATE Context Transition with Measures Maximum Daily Sales by Month Example Context Transition Pit Falls</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/powerbi-context-transition.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/powerbi-context-transition.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Power BI Filter Context: Unraveling the Impact of Filters on Calculations</title><link href="http://ethanguyant.com/blog/2022-10-24-power-bi-filter-context/" rel="alternate" type="text/html" title="Power BI Filter Context: Unraveling the Impact of Filters on Calculations" /><published>2022-10-24T00:00:00+00:00</published><updated>2022-10-24T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/power-bi-filter-context</id><content type="html" xml:base="http://ethanguyant.com/blog/2022-10-24-power-bi-filter-context/">&lt;h2 id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#review&quot;&gt;Review&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction-to-filter-context&quot;&gt;Introduction to Filter Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#the-calculate-function&quot;&gt;The CALCULATE Function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#exploring-filter-context&quot;&gt;Exploring Filter Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-filter-context-with-slicers&quot;&gt;Create Filter Context with Slicers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#create-filter-context-with-calculate&quot;&gt;Create Filter Context with CALCULATE&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#keep-external-filters-with-calculate&quot;&gt;Keep External Filters with CALCULATE&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#more-calculate-examples&quot;&gt;More CALCULATE Examples&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#creating-a-measure-of-high-quantity-sales&quot;&gt;Create a Measure of High Quantity Sales&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#percentage-of-sales-by-product-color&quot;&gt;Percentage of Sales by Product Color&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;
&lt;p&gt;One of the early stages of creating any Power BI report is the development of the data model. The data model will consist of data tables, relationships, and calculations. There are two types of calculations: calculated columns, and measures.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; for key differences between calculated columns and measures.&lt;/p&gt;

&lt;p&gt;All expressions, either from a calculated column or a measure, get evaluated within the evaluation context. The evaluation context limits the values in the current scope when evaluating an expression. The filter context and/or the row context make up the evaluation context.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; of this series explores the row context in depth. While &lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt; explores iterator functions, which are functions that create row context.&lt;/p&gt;

&lt;p&gt;This post is the third of a Power BI Fundamental series with a focus on the filter context. The example file used in this post is located here -&lt;a class=&quot;social-list__link&quot; href=&quot;https://github.com/EMGuyant/power-bi-key-fundamentals&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction-to-filter-context&quot;&gt;Introduction to Filter Context&lt;/h2&gt;
&lt;p&gt;Filter context refers to the filters applied before evaluating an expression. This filter context limits the set of rows of a table available to the calculation. There are two types of filters to consider, the first is implicit filters or filters applied by the user via the report canvas. The second type is explicit filters which use functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATETABLE()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The applied filter context can contain one or many filters. When there are many filters the filter context will be the intersection of all the filters. When the filter context is empty all the data is used during the evaluation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The filter context does not iterate - this is a key difference between the filter context and the row context&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; and &lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt; for more details on the row context.&lt;/p&gt;

&lt;p&gt;Filter context propagates through the data model relationships.  When defining each model relationship the cross-filter direction is set. This setting determines the direction(s) the filters will propagate. The available cross-filter options depend on the cardinality type of the relationship. See available documentation for more information on &lt;a href=&quot;https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-relationships-understand#cross-filter-direction&quot; class=&quot;post__link&quot;&gt;Cross-filter Direction&lt;/a&gt; and &lt;a href=&quot;https://learn.microsoft.com/en-us/power-bi/transform-model/desktop-bidirectional-filtering&quot; class=&quot;post__link&quot;&gt;Enabling Bidirectional Cross-filtering&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is important to be familiar with certain DAX functions which can modify the filter context. Some examples used in the post include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-calculate-function&quot;&gt;The CALCULATE Function&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function can add filters to a measure expression, ignore filters applied to a table, or overwrite filters applied from within the report visuals. The CALCULATE() function is a powerful and important tool when updating or modifying the filter context.&lt;/p&gt;

&lt;p&gt;The syntax of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; is:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE(&amp;lt;expression&amp;gt;, &amp;lt;filter1&amp;gt;, &amp;lt;filter2&amp;gt;, ...)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function can include many filter expressions or no filter expressions. When there are multiple filter expressions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; implements the intersection of all filters. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function applies an internal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AND&lt;/code&gt; logic between filters. Evaluation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;expression&amp;gt;&lt;/code&gt; occurs after evaluating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;filter&amp;gt;&lt;/code&gt; expressions.&lt;/p&gt;

&lt;p&gt;Use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function when modifying the filter context of an expression that returns a scalar value. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATETABLE()&lt;/code&gt; when modifying the filter context of an expression that returns a table.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;exploring-filter-context&quot;&gt;Exploring Filter Context&lt;/h2&gt;
&lt;p&gt;The table below is a visualization of the total sales amount for each product color.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/total-sales-table.png&quot; alt=&quot;Total Sales Table&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The table visual creates filter context, as seen by the total sales amount for each color or row. Evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; occurs by first filtering the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table by the color, and then evaluating the measure with the filtered table. This is then repeated for each product color in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;The above example only contained the single product color filter. However, as mentioned previously the filter context can contain multiple filters. The example table below adds the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductType&lt;/code&gt; to the table. The addition of this field breaks down the total sales first by color and then by product type. For each row, the underlying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table is first filtered by color and product type before evaluating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; measure. In these examples, it is the table visual that is creating the filter context.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/total-sales-product-type-table.png&quot; alt=&quot;Total Sales by Color and Product Type&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-filter-context-with-slicers&quot;&gt;Create Filter Context with Slicers&lt;/h2&gt;
&lt;p&gt;Another way to create filter context is through the use of slicer visuals. For this example, a slicer of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductType&lt;/code&gt; is created.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/filter-context-slicer.gif&quot; alt=&quot;Product Type Slicer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When no value is selected in the slicer the filter context from the slicer visual is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;. Meaning at first the card visual shows the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; value evaluated for all data. Additionally, when no value is selected in the slicer the only filter context is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductColor&lt;/code&gt; from the table visual.&lt;/p&gt;

&lt;p&gt;Following the selection of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; in the product type slicer, the values in both the table and the card visual are updated. The card visual now has one filter context which is the product type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt;. This is evaluated by creating a filtered table and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; is evaluated for this filtered table.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; measure is defined by: &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2 = SUMX(SalesOrderDetail, SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After selecting an option from the slicer the measure is re-evaluated. The re-evaluation occurs to account for the newly created filter context. The filter context creates a subset of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table that matches the slicer selection. Then the row context evaluates the expression row-by-row for the filtered table and is summed. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX()&lt;/code&gt; is an example of an iterator function, see &lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt; for details. The updated value is then displayed on the card visual.&lt;/p&gt;

&lt;p&gt;The table visual works in a similar fashion but, there are two filters applied. The table visual has an initial filter context of the product color. After the selection of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt;, the table gets updated to visualize the intersection of the product color filter and the product type filter.&lt;/p&gt;

&lt;p&gt;Following a selection in the slicer visual, if a row in the table visual is selected this will also apply a filter. The filter context is the intersection of the table selection filters and the slicer. The updated filter context gets applied to all other visuals (e.g. the card visual).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The filter context can contain one or many filters. The filter can come from one or many visuals and gets applied before evaluating the expression. Meaning the filter context gets applied before using the row context to evaluate an expression row-by-row.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;create-filter-context-with-calculate&quot;&gt;Create Filter Context with CALCULATE&lt;/h2&gt;
&lt;p&gt;Previous examples created the filter context using implicit filters. Generally, the user creates this type of filter through the user interface. Another way to create filter context is by using explicit filters. Explicit filters get created through the use of functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt;. For this example, rather than having to select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; in the slicer to view total bike sales, we will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt;. We will create a new measure that will force the filter context. We can do this because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; allows us to set the filter context for an expression.&lt;/p&gt;

&lt;p&gt;We define the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; measure as: &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales = CALCULATE(SalesOrderDetail[SalesAmount2], Products[ProductType]=&quot;BK&quot;)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetails[SalesAmount2]&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Filter: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[ProductType]=&quot;BK&quot;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/calculate-function.gif&quot; alt=&quot;Bike Sales Measure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; is then added to the table visual alongside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt;. When the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; product type is the slicer selection the two table columns are equal. Both measures have the same filter context created by product color and product type. Removing the implicit product type filter by unselecting a product type updates the filter context. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; expression is re-evaluated with the updated filter context. Since the filter context created by the slicer is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt; the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; value calculates using all the data. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; values do not change. This is because of the explicit filter used by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function when we defined the measure.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; measure still has the filter  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[ProductType]=&quot;BK&quot;&lt;/code&gt; applied regardless of the product type slicer.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function only creates filter context and does not create row context. So an important question to ask is why or how the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; measure works. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function references a specific column value,  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[ProductType]=&quot;BK&quot;&lt;/code&gt;. Yet, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function does not have row context. So how does Power BI know which row it is working with? The answer is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function applies the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER()&lt;/code&gt; function. And the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function creates the row context required to evaluate the measure.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt; for details on iterator functions.&lt;/p&gt;

&lt;p&gt;Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[ProductType]=&quot;BK&quot;&lt;/code&gt; filter is shorten syntax. The filter argument passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; is equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER(ALL(Products[ProductType]), Products[ProductType]=&quot;BK&quot;))&lt;/code&gt;.  The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL()&lt;/code&gt; function removes any external filters on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductType&lt;/code&gt; column and is another example of a function that can modify the filter context.&lt;/p&gt;

&lt;h3 id=&quot;keep-external-filters-with-calculate&quot;&gt;Keep External filters with CALCULATE&lt;/h3&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function evaluates the filter context both outside of and within the function. The filter context outside of the function can come from user interaction with visuals. The filter context within the function is the filter expression(s).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; overwrites external filters or filters that are outside of the function&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To explore this we create a table with the Product Type, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesBike&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/total-sales-by-product-table.png&quot; alt=&quot;Totals Sales by Product Type&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; column shows the total sales amount, if any, as expected. While the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; column shows the same repeated value for all rows and is incorrect. Looking at the Product Type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; row we can see this row is correct. This table demonstrates that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; overwrites external filters.&lt;/p&gt;

&lt;p&gt;For example, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BB&lt;/code&gt; product type row filters &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; before evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt;. This returns the correct total sales for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BB&lt;/code&gt; product type. When evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; this external product type filter gets overwritten. The measure calculates the sales amount value for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; product type (explicit filter) and returns this value for all rows.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; can be modified to keep both external and internal filters&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;KEEPFILTERS()&lt;/code&gt; function within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; will force &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULTE()&lt;/code&gt; to keep both external and internal filters.&lt;/p&gt;

&lt;p&gt;To do this we update &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; to: &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales = CALCULATE(SalesOrderDetail[SalesAmount2], KEEPFILTERS(Products[ProductType]=&quot;BK&quot;))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After updating the measure definition the resulting table is shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/total-sales-product-type-table_2.png&quot; alt=&quot;Update Sales by Product Type&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keeping the external filters is shown by the empty values for all rows except &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt;. For example, we look again at the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BB&lt;/code&gt; product type row. When evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BikeSales&lt;/code&gt; Power BI keeps the external filter  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[ProductType]=&quot;BB&quot;&lt;/code&gt; and the internal filter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[ProductType]=&quot;BK&quot;&lt;/code&gt;. When applying more than one filter the filter context is the intersection of the two. The intersection of the two applied filters for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BB&lt;/code&gt; row is empty. A product cannot be both of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BB&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-calculate-examples&quot;&gt;More CALCULATE Examples&lt;/h2&gt;
&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function plays an integral part in the filter context. Below are more examples to show key concepts and show that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; is an important part of the filter context.&lt;/p&gt;

&lt;h3 id=&quot;creating--a-measure-of-high-quantity-sales&quot;&gt;Creating  a measure of High Quantity Sales&lt;/h3&gt;
&lt;p&gt;For the first example, we will be creating a sales measure showing the total sales amount for high-quantity orders. Creating this measure requires first filtering the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderQty&lt;/code&gt;. Then evaluating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; measure with this filtered table.&lt;/p&gt;

&lt;p&gt;We define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HighQtySales&lt;/code&gt; as: &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HighQtySales = CALCULATE([SalesAmount2], SalesOrderDetail[OrderQty]&amp;gt;25)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/highqtysales.gif&quot; alt=&quot;High Quantity Sales Measure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We then visualize this measure on a card visual and see that 96.30K of our total 109.85M sales come from a high-quantity order. This again demonstrates the filter arguments passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; are shorthand syntax. The filter arguments within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER()&lt;/code&gt; function to create the row context required. In this example  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[OrderQty]&amp;gt;25&lt;/code&gt; is equivalent to  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER(ALL(SalesOrderDetail),SalesOrderDetail[OrderQty] &amp;gt; 25)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER()&lt;/code&gt; function is an example of an iterator function and creates the row context. The row context allows for row-by-row evaluation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderQty&lt;/code&gt;. Meaning it evaluates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[OrderQty] &amp;gt; 25&lt;/code&gt; for each row of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER()&lt;/code&gt; then returns a virtual tale which is a subset of the original and contains only orders with a quantity greater than 25.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function creates filter context because the filter arguments provide a table. This table is the intersection of all the filter expressions passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;percentage-of-sales-by-product-color&quot;&gt;Percentage of Sales by Product Color&lt;/h3&gt;
&lt;p&gt;For the second example we will create a measure to show the percentage of total sales for each product color. To create this we will start with a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; measure. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; uses the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function to remove any filters and evaluates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We define &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; as: &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales = CALCULATE([SalesAmount2], ALL(Products[Color]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/all-sales.gif&quot; alt=&quot;All Sales Measure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; is then added to the table visual Percentage of Sales by Color table. Once added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; column shows 190.85M total sales value for each color. This is consistent with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; card visual. Repeating this value for each color is also expected because of the filter expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL(Products[Color])&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL(Products[Color])&lt;/code&gt; creates a new filter context and gets evaluated with any other filters from the visuals. In this example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; overwrites any external filters on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[Color]&lt;/code&gt;. This is why once added to the table visual &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; displays the total sales value repeated for each row.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL()&lt;/code&gt; function removes any filter limiting the color column that may exist while evaluating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt;. It is best practice to be as specific as possible when defining a measure. Notice, in this example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALL()&lt;/code&gt; applies to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product[Color]&lt;/code&gt;, rather than the entire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; table. If other filters exist on other columns from the visual these filters will still impact the evaluation. For example, selecting a product type from the slicer will adjust all values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/total-sales-product-type.gif&quot; alt=&quot;Total Sales by Product Type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following the selection, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; represents the total &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; sales for each color. While the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; measure now represents the total sales for all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; product types. This occurs because when there are multiple filters the result is the intersection of all the filters.&lt;/p&gt;

&lt;p&gt;In this case, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All(Product[Color])&lt;/code&gt; removes the filter on the color column. The slicer visual creates an external filter context of only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BK&lt;/code&gt; product types. During the evaluation, the intersection of these two creates the evaluation context.&lt;/p&gt;

&lt;p&gt;We can also remove the external filter context created by the product type slicer. To do this, we update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; measure to include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[ProductType]&lt;/code&gt; as an additional filter argument.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/total-sales-product-type-2.gif&quot; alt=&quot;Updated Total Sales by Product Type&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We update the filter expression of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; function to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales = CALCULATE([SalesAmount2], ALL(Products[Color], Products[ProductType]))&lt;/code&gt;. After updating the measure the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; column of the table visual updates to the total sales value. The column now displays the expected 109.85M value and is no longer impacted by the filter context created by the slicer visual.&lt;/p&gt;

&lt;p&gt;Another option to remove the filter context within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CALCULATE()&lt;/code&gt; is to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;REMOVEFILTER()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales = CALCULATE(SalesOrderDetail[SalesAmount2], REMOVEFILTERS(Products[Color], Products[ProductType]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; as an initial step of the broader goal to calculate the percentage of total sales. To calculate the percentage we will update the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; expression. We can do this by saving the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AllSales&lt;/code&gt; expression as a variable within the measure. We will also create another variable to store the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; value, which will be the total sales for each product color. Lastly, we will update the measure name to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PercentageSales&lt;/code&gt; which will &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RETURN&lt;/code&gt; the division of the two sales variables.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PercentageSales = 
VAR Sales = SalesOrderDetail[SalesAmount2]
VAR AllSales = CALCULATE(SalesOrderDetail[SalesAmount2], REMOVEFILTERS(Products[Color], Products[ProductType]))

RETURN
DIVIDE(Sales, AllSales)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-23-power-bi-filter-context/percentage-sales.gif&quot; alt=&quot;Percentage of Total Sales by Color&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It is best practice to use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DIVIDE&lt;/code&gt; function because it provides handling of divide by zero errors and will return a blank or a specified value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Deep Dive" /><category term="Microsoft 365" /><category term="Power BI" /><category term="Power Platform" /><category term="Power BI Fundamentals Series" /><summary type="html">Contents Review Introduction to Filter Context The CALCULATE Function Exploring Filter Context Create Filter Context with Slicers Create Filter Context with CALCULATE Keep External Filters with CALCULATE More CALCULATE Examples Create a Measure of High Quantity Sales Percentage of Sales by Product Color</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/powerbi-filter-context.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/powerbi-filter-context.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations</title><link href="http://ethanguyant.com/blog/2022-10-11-power-bi-iterators/" rel="alternate" type="text/html" title="Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations" /><published>2022-10-11T00:00:00+00:00</published><updated>2022-10-11T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/power-bi-iterators</id><content type="html" xml:base="http://ethanguyant.com/blog/2022-10-11-power-bi-iterators/">&lt;h2 id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;Overview&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#understanding-iterators&quot;&gt;Understanding Iterators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#iterator-functions-that-generate-virtual-tables&quot;&gt;Iterator Functions that Generate Virtual Tables&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#combining-iterators&quot;&gt;Combining Iterators&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;review&quot;&gt;Review&lt;/h2&gt;
&lt;p&gt;In order to facilitate analysis and visualization in Power BI a data model must first be created. The data model consists of individual data tables, relationships, and calculations. Calculations come in the form of either calculated columns or measures.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; for key differences between calculated columns and measures.&lt;/p&gt;

&lt;p&gt;The evaluation context limits the values in the current scope when Power BI evaluates a DAX expression. There are two types of evaluation context, filter and row, that can be active during the evaluation of a DAX expression.&lt;/p&gt;

&lt;p&gt;This post is the second of a Power BI Fundamental series with a focus on iterator functions. The example file used in this post is located here -&lt;a class=&quot;social-list__link&quot; href=&quot;https://github.com/EMGuyant/power-bi-key-fundamentals&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;This post will build upon the Power BI file created in Part 1 of the series titled row_context_example. The example file for this post is iterator_functions, and both can be found here (&lt;a class=&quot;social-list__link&quot; href=&quot;https://github.com/EMGuyant/power-bi-key-fundamentals&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As noted at the end of &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt;, creating a measure by default was unable to reference the row values of a column. When creating a measure a column can be referenced and passed to a standard aggregation function. The standard aggregation function will return only a single aggregated value. This is not the row-by-row functionality that will be required to replace a calculated column, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Creating the desired measure will require an iterator function to create row context.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;understanding-iterators&quot;&gt;Understanding Iterators&lt;/h2&gt;
&lt;p&gt;An iterator moves row-by-row or iterates through an object. The object can be a data model table or a virtual/temporary table. Data model tables are tables loaded into or linked to within Power BI. A table generated from within a measure and persists only for a temporary period of time is a virtual table.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Since an iterator moves row-by-row it has row context, and row context always iterates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An iterator function can return a single value (e.g. number, text, date) or a virtual table. An iterator generally has two arguments:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The object (i.e. table) to iterate through&lt;/li&gt;
  &lt;li&gt;The expression evaluated for each row of the object&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It can be helpful to think of the expression as a temporary column of the object. Evaluation of the expression occurs row-by-row creating a column of calculated results. The column of results only persists during the evaluation and is not loaded to the data model. The purpose of the temporary column is to calculate the final returned value of the iterator.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A common identifier of an Iterator Function is an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; at the end of the function’s name&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Examples of iterator functions include &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MINX&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAXX&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AVERAGEX&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RANKX&lt;/code&gt;. The ending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; is only a common identifier, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; is an example of an iterator function that does not end with a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Example Iterator Function: &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX(SalesOrderDetail, SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount]))&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Table: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; - the object iterated over&lt;/li&gt;
  &lt;li&gt;Expression: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount])&lt;/code&gt; - the expression evaluated for each row&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-12-power-bi-iterators/iterator_function.gif&quot; alt=&quot;Creating Example Iterator Function&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once implementing the iterator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt; and specifying the table as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetails&lt;/code&gt; the columns of the table will be recognized and able to be referenced like when the calculated column was created. The new measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; created using an iterator will replace the calculated column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt;. Comparing the default aggregation of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; column (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sum of SalesAmount&lt;/code&gt;) and the new measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount2&lt;/code&gt; it can been see the values are equal.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-12-power-bi-iterators/total_sales_2_tables.png&quot; alt=&quot;Table of data with iterator function results&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;iterator-functions-that-generate-virtual-tables&quot;&gt;Iterator Functions that Generate Virtual Tables&lt;/h2&gt;

&lt;p&gt;There are iterator functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt; that return a scalar value and there are ones like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; that return virtual tables.&lt;/p&gt;

&lt;p&gt;To further explore, first create a new table in the data model generated by the returned table of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;For this example, we use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function to create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue&lt;/code&gt; table. For the first argument of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function we pass in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; table. Then we filter that table using a filter expression defined as: 
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products[Color] = &quot;blue&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue = FILTER(Products, Products[Color] = &quot;blue&quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We then can visualize this new table and compare the row count to the count of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductID&lt;/code&gt; by color of the original table. Comparing these two tables we see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue&lt;/code&gt; is a subset of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-12-power-bi-iterators/product_blue_table.png&quot; alt=&quot;New ProductBlue Table&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The generation of this table highlights the iterating functionality and the row context when evaluating the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function. To create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue&lt;/code&gt; table the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; iterator function must create row context. During the evaluation, the function must go within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Products&lt;/code&gt; table and for each row (i.e. row context) evaluate what the product color is. If the color is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Blue&lt;/code&gt; the function returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt; otherwise returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;. The resulting table then consists of only rows from the original table which evaluated to a value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Creating the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue&lt;/code&gt; table was for demonstrative purposes. The table returned by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; can be a virtual table used within a measure. In this case, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue&lt;/code&gt; table would only persist while the measure is being evaluated. As an example, create a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlueMeasure&lt;/code&gt; measure using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COUNTROWS&lt;/code&gt; function. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COUNTROWS&lt;/code&gt; takes a single argument, the table to count the row of. To do this we will pass the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; expression used to create the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue&lt;/code&gt; table to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COUNTROWS&lt;/code&gt; function. To further demonstrate that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlue&lt;/code&gt; table is unnecessary, we can create a similar &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductBlackMeasure&lt;/code&gt;.  Viewing these measures shows the result is the same count that was produced by the other methods used to obtain this count.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-12-power-bi-iterators/product_color_measures.png&quot; alt=&quot;Product Color Measure&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;combining-iterators&quot;&gt;Combining Iterators&lt;/h2&gt;

&lt;p&gt;More complex measures can be created by combining or nesting iterators. For example, combining the product color and the sales data, such as evaluating the total sales for only blue products. This measure will first create a virtual table of the sales data for only blue products. Then iterate row-by-row through the virtual table and evaluate the sales amount. Finally, return the total sales amount.&lt;/p&gt;

&lt;p&gt;The DAX expression will be:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX(FILTER(SalesOrderDetail, RELATED(Products[Color])=&quot;Blue&quot;), SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount]))&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The virtual table mentioned above is generated by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER(SalesOrderDetail, RELATED(Products[Color])=&quot;Blue&quot;)&lt;/code&gt;. This is the first iterator function that is evaluated using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table and the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RELATED(Products[Color])=&quot;Blue&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RELATED()&lt;/code&gt; is a function that returns a related value from another table. This function can be used since the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Product&lt;/code&gt; table is related to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table with a key value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ProductID&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function returns a subset of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table containing only rows where the product is blue. This virtual table is then passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then the expression evaluated row-by-row is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount])&lt;/code&gt; which returns the total sales amount for each row. Then this temporary column is summed by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-10-12-power-bi-iterators/product_blue_total_sales.png&quot; alt=&quot;Blue Product Total Sales&quot; class=&quot;post__link&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Viewing the two tables on the left, the totals sales for the Blue products for all methods is approximately 9.60M. Selecting the blue row in the top table filters the table below, to show sales by Product for only blue products. Viewing the totals for all three methods also shows a value of approximately 9.60M. Lastly, viewing the value card under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nested Iterator&lt;/code&gt; shows that the above created DAX expressions results in the same value of 9.60M.&lt;/p&gt;

&lt;p&gt;Two key concepts are highlighted by the above example&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; create row context
    &lt;ul&gt;
      &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function returns a virtual table which is a subset of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt; returns the sum of the row-by-row calculation of the total sale amount&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;The table passed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUMX&lt;/code&gt; is the table which is returned by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER&lt;/code&gt; function
    &lt;ul&gt;
      &lt;li&gt;After evaluating the expression everything created by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FILTER(SalesOrderDetail, RELATED(Products[Color])=&quot;Blue&quot;), SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount])&lt;/code&gt; gets discarded and requires no memory space.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;As DAX expressions get longer and more complex formatting the expression will help make them easier to read and understand, tools such as &lt;a href=&quot;https://www.daxformatter.com/&quot; class=&quot;post__link&quot;&gt;DAXFormatter&lt;/a&gt; can aid in formatting if needed&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The concept of evaluation context has been mentioned in this post as well as in &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt;. Evaluation context is the context in which a DAX formula evaluates a calculation. There are two types, &lt;a href=&quot;https://ethanguyant.com/blog/2022-09-28-power-bi-row-context/&quot; class=&quot;post__link&quot;&gt;Power BI Row Context: Understanding the Power of Context in Calculations&lt;/a&gt; explored the first type, row context. This post explored iterators or specific functions which create row context to perform multi-column calculations. Check back for Part Three of this series which will explore the second type of evaluation context, the filter context.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Deep Dive" /><category term="Microsoft 365" /><category term="Power BI" /><category term="Power Platform" /><category term="Power BI Fundamentals Series" /><summary type="html">Contents Overview Introduction Understanding Iterators Iterator Functions that Generate Virtual Tables Combining Iterators</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/powerbi-iterators.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/powerbi-iterators.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Power BI Row Context: Understanding the Power of Context in Calculations</title><link href="http://ethanguyant.com/blog/2022-09-28-power-bi-row-context/" rel="alternate" type="text/html" title="Power BI Row Context: Understanding the Power of Context in Calculations" /><published>2022-09-28T00:00:00+00:00</published><updated>2022-09-28T00:00:00+00:00</updated><id>http://ethanguyant.com/blog/power-bi-row-context</id><content type="html" xml:base="http://ethanguyant.com/blog/2022-09-28-power-bi-row-context/">&lt;h2 id=&quot;contents&quot;&gt;Contents&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#understanding-row-context&quot;&gt;Understanding Row Context&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#creating-a-calculated-column&quot;&gt;Creating a Calculated Column&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#limitation&quot;&gt;Limitation&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#replacing-a-calculated-column-with-a-measure&quot;&gt;Replacing a Calculated Column with a Measure&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In order to facilitate analysis and visualization in Power BI, a data model must first be created. The data model will consist of individual data tables, relationships between the tables, and calculations to aid in the analysis. Calculations typically come in the form of either calculated columns or measures.&lt;/p&gt;

&lt;p&gt;A few key differences between calculated columns and measures include:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Calculated Columns&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Measures&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Resolves as a scalar value&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Resolves as an aggregate value&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Persists in each row of a table&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Displays as a data point&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Increases the size of the data model&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Does not impact the size of the data model&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;When a DAX expression is evaluated the values the expression can access are limited by the evaluation context. When a calculated column or measure is evaluated there are two fundamental types of evaluation context: (1) Filter Context, and (2) Row Context.&lt;/p&gt;

&lt;p&gt;This post is the first of a series focused on the key fundamentals of Power BI. This first post will focus on the concept of row context. Parts 2-4 in the series will focus on iterator functions, filter context, and context transition.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;understanding-row-context&quot;&gt;Understanding Row Context&lt;/h2&gt;
&lt;p&gt;The row context limits a DAX expression during evaluation to only the current row, the reference to each specific row is defined by the row context. However, it should be noted that all standard aggregation functions (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SUM()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;COUNT()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MAXIMUM()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MINIMUM()&lt;/code&gt;) will override this default behavior and impose a filter context on the entire table.&lt;/p&gt;

&lt;p&gt;Row context exists when:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Creating calculated columns within a table&lt;/li&gt;
  &lt;li&gt;Creating iterators, see Part 2 for more details on iterator functions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Using Excel as an example, multiplying the values in two cells can be achieved with the formula &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=A2 * B2&lt;/code&gt;. The key difference is that when performing calculations in Excel the formula contains a reference to a &lt;em&gt;cell&lt;/em&gt; defined by column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; and row &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2&lt;/code&gt; however, in DAX there is no reference to a cell. Rather a calculation is carried out column by column &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[A] * [B]&lt;/code&gt;. DAX operates on columns and tables and it is the row context that provides the required row information for the calculation to be carried out.&lt;/p&gt;

&lt;p&gt;The above multiplication &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[A] * [B]&lt;/code&gt; performs the desired calculation row-by-row through the entire table. This row-by-row functionality makes the row context similar to an iterator.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The row context means iterating over the table or for each row the calculation being conducted is limited to just the current row.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;See Part 2 for more details on iterator functions.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;creating-a-calculated-column&quot;&gt;Creating a Calculated Column&lt;/h2&gt;
&lt;p&gt;As mentioned above, row context is invoked while creating a new calculated column. As an example, a new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; calculated column will be added to a SalesOrderDetail table. The example data and Power BI file can be found here (&lt;a class=&quot;social-list__link&quot; href=&quot;https://github.com/EMGuyant/power-bi-key-fundamentals&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; GitHub&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount = SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;While entering the above formula, after starting to type the column names in the formula bar (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderQty&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnitPrice&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UnitPriceDiscount&lt;/code&gt;) it can be seen that IntelliSense can recognize and reference the corresponding columns in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail&lt;/code&gt; table (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[OrderQty]&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-09-30-power-bi-row-context/row_context_001.gif&quot; alt=&quot;Creating a calculated column gif&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; expression, only the column names are specified, however, since this is creating a calculated column the row context is available. This means that during the evaluation of the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[OrderQty]&lt;/code&gt; does not reference the entire column but rather the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderQty&lt;/code&gt; value for the specific row within the scope of the calculation. This allows the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; column to use the correct values when it is calculated row-by-row.&lt;/p&gt;

&lt;p&gt;Viewing the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; column shows that the values are calculated for each row in the table. This is because row context means to iterate over each row of the table and perform the calculation for the specific row that is in the current scope.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-09-30-power-bi-row-context/calculated_column_salescolumn.png&quot; alt=&quot;Table of NetSaleAmount Values&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new calculated column can then be utilized in creating a new measure, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSalesAmount&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSalesAmount = SUM(SalesOrderDetail[SalesAmount])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-09-30-power-bi-row-context/total_measures.gif&quot; alt=&quot;New measure using SalesAmount&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This new measure can then be included in visuals to summarize the sales data, for example, visualize the total sales by product color or by product name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-09-30-power-bi-row-context/total_sales_measure.png&quot; alt=&quot;Total Sales and Sum of SalesAmount&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The tables above show that the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSalesAmount&lt;/code&gt; measure for each product color/name and the sum of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; calculated column are equal. This highlights that the new measure and the default aggregation (e.g. sum) will produce the same values.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Although a default aggregation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; can be used to produce the same values as the measure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSalesAmount&lt;/code&gt; it is best practice to use a measure for aggregation and not use default aggregations of a column.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;limitation&quot;&gt;Limitation&lt;/h2&gt;
&lt;p&gt;The method of adding a new calculated column is beneficial for aiding in understanding the impacts and use of the row context. However, a limitation to the approach of creating a column similar to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; is that each column created in a data model table increases the data model size because calculated columns are created and stored as columns in the data model when loaded (i.e. the .pbix file is opened or data is refreshed). Due to this, a column like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; normally would not be created in the data model, rather a measure can be used which does not increase the size of the overall data model. Measures do not increase the size of the data model because they are calculated in real-time, that is when the measure is used in a visual (table or chart).&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Best practice is to use measures whenever possible.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are certain situations where a measure cannot be used and a calculated column is required. For example, a calculated column is required when the resulting value is to be used as an axis on a visual.&lt;/p&gt;

&lt;h3 id=&quot;replacing-a-calculated-column-with-a-measure&quot;&gt;Replacing a Calculated Column with a Measure&lt;/h3&gt;
&lt;p&gt;Replacing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; calculated column with a measure may seem straightforward. Looking at the two formulas below, it is not unreasonable to think that the reference to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[SalesAmount]&lt;/code&gt; within the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSalesAmount&lt;/code&gt; measure could simply be replaced with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount])&lt;/code&gt; (the formula of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount&lt;/code&gt; calculated column).&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SalesAmount = SalesOrderDetail[OrderQty] * SalesOrderDetail[UnitPrice] * (1 - SalesOrderDetail[UnitPriceDiscount])&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSalesAmount = SUM(SalesOrderDetail[SalesAmount])&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;However, if you create a new measure (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TotalSalesAmount2&lt;/code&gt;) and start typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderQty&lt;/code&gt; IntelliSense will not provide it as an option to select as it did previously when creating the calculated column.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2022-09-30-power-bi-row-context/measure_totalsales2.gif&quot; alt=&quot;TotalSales2 new measure&quot; class=&quot;post__img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The table columns are not available because by default a measure &lt;em&gt;does not&lt;/em&gt; have row context. Without the row context Power BI does not know which specific &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrderQty&lt;/code&gt; value should be referenced. For creating a measure that requires row context an iterator function will have to be used.&lt;/p&gt;

&lt;p&gt;An iterator function can retrieve values from other columns in a table based on the row context, then perform an operation on the column values row-by-row, and finally aggregate the results.&lt;/p&gt;

&lt;p&gt;Check out &lt;a href=&quot;https://ethanguyant.com/blog/2022-10-11-power-bi-iterators/&quot; class=&quot;post__link&quot;&gt;Power BI Iterators: Unleashing the Power of Iteration in Power BI Calculations&lt;/a&gt; for an exploration of iterators.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;If you enjoy what you read and find it helpful please check back, and check back often. Follow me on &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/@emguyant&quot;&gt;&lt;i class=&quot;fab fa-medium&quot;&gt;&lt;/i&gt; Medium&lt;/a&gt; while giving a clap to the article! Also don’t forget to subscribe to the &lt;a class=&quot;post__link&quot; href=&quot;https://medium.com/inquisitive-nature&quot;&gt;&lt;b&gt;INQUISITIVE NATURE&lt;/b&gt;&lt;/a&gt; publication.&lt;/p&gt;</content><author><name>Ethan Guyant</name></author><category term="Deep Dive" /><category term="Microsoft 365" /><category term="Power BI" /><category term="Power Platform" /><category term="Power BI Fundamentals Series" /><summary type="html">Contents Understanding Row Context Creating a Calculated Column Limitation Replacing a Calculated Column with a Measure</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://ethanguyant.com/assets/img/post_img/powerbi_fundamentals_part1.jpg" /><media:content medium="image" url="http://ethanguyant.com/assets/img/post_img/powerbi_fundamentals_part1.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>